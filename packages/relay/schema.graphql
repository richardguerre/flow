# @generated
enum Color {
  amber
  blue
  cyan
  emerald
  fuchsia
  gray
  green
  indigo
  lime
  neutral
  orange
  pink
  purple
  red
  rose
  sky
  slate
  stone
  teal
  violet
  yellow
  zinc
}

input CreateNoteTagInput {
  """The color of the tag."""
  color: String!

  """The name of the tag."""
  name: String!

  """The slug of the tag. Defaults to dashcase version of the name."""
  slug: String
}

input CreateTaskTagInput {
  """The color of the task tag."""
  color: Color!

  """Whether tasks with this tag will be considered private."""
  isPrivate: Boolean!

  """The name of the task tag."""
  name: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A day a user has planned or already done.\nDays that have not yet been planned are virtually created in the GraphQL API.
"""
type Day implements Node {
  """The date of the day."""
  date: Date!
  id: ID!

  """The notes linked to the day."""
  notes: [Note!]!

  """The routines for the day in chronological order."""
  routines: [Routine!]!
  tasks: [Task!]!
}

"""
An item created by the user or a plugin. The user can then create 1 or more tasks from the item.\nIt can be a calendar event, a Trello task, a Linear issue, a GitHub request for review, a notification, etc.
"""
type Item implements Node {
  """The tailwind color of the item. Used in the calendar view."""
  color: Color

  """The date and time of creation of the item"""
  createdAt: DateTime!

  """
  The length of time the item is expected to take. If the item is all-day, this is null.
  """
  durationInMinutes: Int
  id: ID!

  """
  The number of inbox points the item has to be shown in the inbox.\nThe more inbox points an item has, the higher it is in the inbox.
  """
  inboxPoints: Int

  """Whether the item is all-day on the date of `scheduledAt`."""
  isAllDay: Boolean

  """
  Whether the item is relevant to the user and should be shown. (default: true)\nFor example when a plugin creates an item for a Trello task, then later on the user arhives the task, the item is no longer relevant.
  """
  isRelevant: Boolean!

  """The list in which the item is in"""
  list: List
  listId: ID

  """The plugin datas linked to the item"""
  pluginDatas: [ItemPluginData!]!

  """The date and time the item is scheduled for."""
  scheduledAt: DateTime

  """The tasks linked to the item"""
  tasks: [Task!]!

  """
  The title of the item.\nIt is used as the initial title when creating a task from the item.
  """
  title: String!
}

input ItemFilter {
  inboxPoints: PrismaIntFilter
  isRelevant: Boolean
  pluginDatas: ItemPluginDataListFilter
  scheduledAt: PrismaDateTimeFilter
  tasks: TaskListFilter
}

input ItemOrderBy {
  createdAt: OrderBy
  inboxPoints: OrderBy
  scheduledAt: OrderBy
  updatedAt: OrderBy
}

"""The data a plugin links to an item."""
type ItemPluginData implements Node {
  """The date and time of creation of the item plugin data"""
  createdAt: DateTime!

  """The full data required by the plugin to be linked to the item."""
  full: JSON!
  id: ID!

  """The minimum data required to render the information on item cards."""
  min: JSON!

  """The slug of the plugin that created the data"""
  pluginSlug: String!

  """The date and time the item plugin data was last updated"""
  updatedAt: DateTime!
}

input ItemPluginDataFilter {
  AND: [ItemPluginDataFilter!]
  OR: [ItemPluginDataFilter!]
  full: PrismaJsonFilter
  min: PrismaJsonFilter
  originalId: String
  pluginSlug: String
}

input ItemPluginDataInput {
  full: JSON!
  min: JSON!
  originalId: String
  pluginSlug: String!
}

input ItemPluginDataListFilter {
  every: ItemPluginDataFilter
  none: ItemPluginDataFilter
  some: ItemPluginDataFilter
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""List of items"""
type List implements Node {
  """The date and time of creation of the list"""
  createdAt: DateTime!

  """The description of the list"""
  description: String
  id: ID!

  """The items linked to the list"""
  items(after: ID, before: ID, first: Int, last: Int, where: ItemFilter): ListItemsConnection!

  """The name of the list"""
  name: String!

  """The slug (i.e. the url-safe version) of the list name"""
  slug: String!
}

type ListItemsConnection {
  edges: [ListItemsConnectionEdge!]!
  pageInfo: PageInfo!
}

type ListItemsConnectionEdge {
  cursor: ID!
  node: Item!
}

type Mutation {
  """
  Change password for the Flow instance and get a new session token to make authenticated requests.
  """
  changePassword(input: MutationChangePasswordInput!): String!
  completeRoutine(input: MutationCompleteRoutineInput!): Boolean!

  """Create an item in the calendar."""
  createCalendarItem(input: MutationCreateCalendarItemInput!): Item!

  """Create an item."""
  createItem(input: MutationCreateItemInput!): Item!

  """
  Updates a note if one exists with the passed in `slug`, otherwise creates a new note.
  """
  createOrUpdateNote(input: MutationCreateOrUpdateNoteInput!): Note!

  """Create or update a template."""
  createOrUpdateTemplate(input: MutationCreateOrUpdateTemplateInput!): Template!
  createRoutine(input: MutationCreateRoutineInput!): Routine!

  """Create a new subtask."""
  createSubtask(input: MutationCreateSubtaskInput!): Task!

  """Create a new task."""
  createTask(input: MutationCreateTaskInput!): Task!

  """Create a new task tag."""
  createTaskTag(input: MutationCreateTaskTagInput!): TaskTag!

  """Create a new template and link it to a routine step."""
  createTemplate(input: TemplateInput!): Template!

  """Delete an item."""
  deleteItem(id: ID!): Item!

  """Delete a task."""
  deleteTask(
    """The Relay ID of the task to delete."""
    id: ID!
  ): Task!

  """Delete a task tag."""
  deleteTaskTag(input: MutationDeleteTaskTagInput!): TaskTag!

  """Delete a template."""
  deleteTemplate(
    """The Relay ID of the template to delete."""
    id: ID!
  ): Template!

  """Disable a shortcut."""
  disableShortcut(id: ID!): Shortcut!

  """
  Dismiss an item from the inbox. This effectively sets `inboxPoints = null` for the item.
  """
  dismissItemFromInbox(input: MutationDismissItemFromInboxInput!): Item!

  """Enable a shortcut."""
  enableShortcut(id: ID!): Shortcut!

  """
  Install a plugin. If a plugin with the same slug exists, it will throw an error, unless `override` is set to true.
  """
  installPlugin(input: MutationInstallPluginInput!): [PluginInstallation!]!

  """
  Login to the Flow instance and get a session token to make authenticated requests.
  """
  login(input: MutationLoginInput!): String!

  """
  Logout from the Flow instance using the session token set in the Authorization header.
  """
  logout: Boolean!

  """Make a task a subtask of another task."""
  makeTaskSubtaskOf(input: MutationMakeTaskSubtaskOfInput!): Task!
  pluginOperation(input: MutationPluginOperationInput!): PluginOperation
  refreshCalendarItems: Boolean!

  """
  Set password for the Flow instance and get a session token to make authenticated requests.
  """
  setPassword(input: MutationSetPasswordInput!): String!

  """
  Set the timezone using a [dayjs timezone string](https://day.js.org/docs/en/plugin/timezone) (e.g. "America/New_York") for the Flow instance. This will affect the time the tasks are synced (default is 04:00 in the timezone set)
  """
  setTimezone(input: MutationSetTimezoneInput!): String!

  """Uninstall a plugin."""
  uninstallPlugin(input: MutationUninstallPluginInput!): [PluginInstallation!]!

  """Update an item."""
  updateItem(input: MutationUpdateItemInput!): Item!

  """
  Mark an item as done or not done. Plugins can use this to mark the item as done or not done in the external system. For example, if the item is a trello task and is marked as done in Flow, it will be marked as done in trello (by the Trello plugin).
  """
  updateItemStatus(input: MutationUpdateItemStatusInput!): Item!
  updateRoutine(input: MutationUpdateRoutineInput!): Routine!
  updateRoutineStep(input: MutationUpdateRoutineStepInput!): RoutineStep!

  """Update a task."""
  updateTask(input: MutationUpdateTaskInput!): Task!

  """
  Update the date of a task and/or position of the task in the day, and get the updated days (as a list in chronological order).
  
  Input:
  - `id`: The ID of the task to update.
  - `date`: The new date of the task.
  - `after`: The ID of the task to place the task after. If `null`, the task will be placed at the beginning of the day.
  
  When the task is:
  - already in the desired date, it updates the order and returns the day.
  - moved to today, it updates the date and order but not the status, and returns the original day and today.
  - moved into the past, it updates the date and order, updates the status to `DONE` (if not already),
    and returns the original day and the new day.
  - moved into the future, it updates the date and order, updates the status to `TODO` (if not already),
    and returns the original day and the new day.
  """
  updateTaskDate(input: MutationUpdateTaskDateInput!): [Day!]!

  "Update the status of a task and get the updated days (as a list in chronological order).\n\nWhen the task is:\n- already in the desired status, it does nothing and returns an empty list.\n- for today, it updates the status and returns the day.\n- for a previous day and changing to `TODO`, it updates the status and\n  returns the original day and today.\n- for a future day and changing to `DONE` or `CANCELED`, it updates the status and\n  returns the original day and today.\n\nAny other scenario is not possible by nature of the app, where tasks:\n- in the past can only be `DONE` or `CANCELED` \n- in the future can only be in `TODO`\n    "
  updateTaskStatus(input: MutationUpdateTaskStatusInput!): [Day!]!

  """Update a task tag."""
  updateTaskTag(input: MutationUpdateTaskTagInput!): TaskTag!

  """Update a template."""
  updateTemplate(input: MutationUpdateTemplateInput!): Template!

  """Create a new shortcut."""
  upsertShortcut(input: MutationUpsertShortcutInput!): Shortcut!

  """
  Creates a store item. If a store item with the same key exists, only its value will be updated (`isSecret` and `isServerOnly` will not be updated).
  
  If the `pluginSlug` is passed, it will create/update a store item for that plugin. Otherwise, it will create/update a store item for flow.
  
  If `isSecret` is set to true, `isServerOnly` will also be set to true and will not be returned in the `storeItems` query (it will be `null`). The item will only be accessible by plugin with the same `pluginSlug` in the server.
  
  If `isServerOnly` is set to true, the store item will not be returned in the `storeItems` query (it will be `null`). The item will be accessible by all plugins in the server.
  """
  upsertStoreItem(input: MutationUpsertStoreItemInput!): Store!
}

input MutationChangePasswordInput {
  """The new password (unhashed)."""
  newPassword: String!

  """The old password (unhashed)."""
  oldPassword: String!
}

input MutationCompleteRoutineInput {
  """The date the routine was completed."""
  date: Date!

  """The ID of the routine that was completed."""
  routineId: ID!
}

input MutationCreateCalendarItemInput {
  color: Color
  durationInMinutes: Int
  fromTaskId: ID
  isAllDay: Boolean
  pluginDatas: [ItemPluginDataInput!]
  scheduledAt: DateTime!

  """The title of the item."""
  title: String!
}

input MutationCreateItemInput {
  color: Color
  durationInMinutes: Int
  inboxPoints: Int
  isAllDay: Boolean

  """
  If set to true, it will return items where `isRelevant` is true. 
  
  `isRelevant` is used in the List component to only show relevant items. If the item becomes irrelevant (e.g. because the trello task was already completed), you can update the item to make this `isRelevant = false`
  """
  isRelevant: Boolean
  listId: ID
  pluginDatas: [ItemPluginDataInput!]
  scheduledAt: DateTime

  """The title of the item."""
  title: String!
}

input MutationCreateOrUpdateNoteInput {
  """The content of the note."""
  content: String!

  """The date of the note."""
  date: Date!

  """Create new tags and link them to the note."""
  newTags: [CreateNoteTagInput!]

  """The IDs of tags to be unlinked from the note."""
  removedTags: [ID!]

  """The slug of the note. Used for retrieving the note back."""
  slug: String!

  """
  The IDs of exsiting tags to be linked to the note. If you want to create a new tag, use the `newTags` input.
  """
  tags: [ID!]

  """The title of the note."""
  title: String!
}

input MutationCreateOrUpdateTemplateInput {
  metadata: JSON
  raw: String!

  """The Relay ID of the routine step to link the template to."""
  routineStepId: ID
  slug: String!
}

input MutationCreateRoutineInput {
  actionName: String!
  name: String!
  repeats: [RepetitionPattern!]!
  steps: [RoutineStepInput!]!
  time: Time!
}

input MutationCreateSubtaskInput {
  """The Relay ID of the parent task."""
  parentTaskId: ID!

  """The title of the subtask."""
  title: String!
}

input MutationCreateTaskInput {
  """
  Additional data separate from the pluginDatas to be passed to the plugins when creating the task.
  """
  actionDatas: [TaskActionDataInput!]

  """
  The position in the day the task should be placed at. If not specified, it will be placed at the beginning.
  """
  atIndex: Int

  """The day (no time required) the task is planned for."""
  date: Date

  """The length of time (in minutes) the task is expected to take."""
  durationInMinutes: PositiveInt

  """The Relay ID of the Item that should be linked to the task."""
  itemId: ID

  """Create new tags and link them to the task."""
  newTags: [CreateTaskTagInput!]

  """The plugin data to be linked to the task."""
  pluginDatas: [TaskPluginDataInput!]

  """The initial status of the task. Defaults to `TODO`."""
  status: TaskStatus = TODO

  """
  The IDs of exsiting tags to be linked to the task. If you want to create a new tag, use the `newTags` input.
  """
  tags: [ID!]

  """The title of the task."""
  title: String!
}

input MutationCreateTaskTagInput {
  """The color of the task tag."""
  color: Color!

  """Whether tasks with this tag will be considered private."""
  isPrivate: Boolean!

  """The name of the task tag."""
  name: String!
}

input MutationDeleteTaskTagInput {
  """The Relay ID of the task tag to delete."""
  id: ID!
}

input MutationDismissItemFromInboxInput {
  id: ID!
}

input MutationInstallPluginInput {
  override: Boolean
  url: String!
}

input MutationLoginInput {
  """The password (unhashed)."""
  password: String!
}

input MutationMakeTaskSubtaskOfInput {
  """The Relay ID of the parent task."""
  parentTaskId: ID!

  """The Relay ID of the task to update."""
  taskId: ID!
}

input MutationPluginOperationInput {
  data: JSON
  operationName: String!
  pluginSlug: String!
}

input MutationSetPasswordInput {
  """The password to set (unhashed)."""
  password: String!
}

input MutationSetTimezoneInput {
  """
  The timezone to set as a [dayjs timezone string](https://day.js.org/docs/en/plugin/timezone) (e.g. "America/New_York").
  """
  timezone: String!
}

input MutationUninstallPluginInput {
  slug: String!
}

input MutationUpdateItemInput {
  color: Color
  durationInMinutes: Int
  id: ID!
  inboxPoints: Int
  isAllDay: Boolean

  """
  If set to true, it will return items where `isRelevant` is true.
  
  `isRelevant` is used in the List component to only show relevant items. If the item becomes irrelevant (e.g. because the trello task was already completed), you can update the item to make this `isRelevant = false`
  """
  isRelevant: Boolean
  listId: ID
  pluginDatas: [ItemPluginDataInput!]
  scheduledAt: DateTime
  title: String
}

input MutationUpdateItemStatusInput {
  """Whether the item is done or not."""
  done: Boolean!

  """The ID of the item."""
  id: ID!
}

input MutationUpdateRoutineInput {
  """The action name to update the routine with."""
  actionName: String

  """Whether the routine is active."""
  isActive: Boolean

  """The name to update the routine with."""
  name: String

  """The repetition patterns to update the routine with."""
  repeats: [RepetitionPattern!]

  """The ID of the routine to update."""
  routineId: ID!

  """The steps to update the routine with."""
  steps: [RoutineStepInput!]

  """The time to use the routine with."""
  time: Time
}

input MutationUpdateRoutineStepInput {
  """The config of the step. This can be any JSONObject"""
  config: JSONObject

  """The ID of the routine step. It must exist."""
  id: ID!

  """Whether the step should be skipped or not."""
  shouldSkip: Boolean

  """The templates linked to the step."""
  templates: [TemplateInput!]
}

input MutationUpdateTaskDateInput {
  """The new date of the task."""
  date: Date!

  """The Relay ID of the task to update."""
  id: ID!

  """The new order of the tasks in the day the task is moved into."""
  newTasksOrder: [ID!]!
}

input MutationUpdateTaskInput {
  """The length of time (in minutes) the task is expected to take."""
  durationInMinutes: PositiveInt

  """The Relay ID of the task to update."""
  id: ID!

  """Create new tags and link them to the task."""
  newTags: [CreateTaskTagInput!]

  """
  The IDs of tags to be unlinked from the task. If you want to create a new tag, use the `newTags` input.
  """
  removeTags: [ID!]

  """
  The IDs of exsiting tags to be linked to the task. If you want to create a new tag, use the `newTags` input.
  """
  tags: [ID!]

  """The title of the task."""
  title: String
}

input MutationUpdateTaskStatusInput {
  """The action data to be passed to the plugin."""
  actionData: [TaskActionDataInput!]

  """The Relay ID of the task to update."""
  id: ID!

  """The new status of the task."""
  status: TaskStatus!
}

input MutationUpdateTaskTagInput {
  """The new color of the task tag."""
  color: Color

  """The Relay ID of the task tag to update."""
  id: ID!

  """Whether tasks with this tag will be considered private."""
  isPrivate: Boolean

  """The new name of the task tag."""
  name: String
}

input MutationUpdateTemplateInput {
  """The Relay ID of the template to update."""
  id: ID!
  metadata: JSON
  newSlug: String
  raw: String

  """The Relay ID of the routine step to link the template to."""
  routineStepId: ID
}

input MutationUpsertShortcutInput {
  elementId: String!
  enabled: Boolean
  pluginSlug: String!
  slug: String!
  trigger: [String!]!
}

input MutationUpsertStoreItemInput {
  isSecret: Boolean
  isServerOnly: Boolean
  key: String!
  pluginSlug: String!
  value: JSON!
}

interface Node {
  id: ID!
}

"""A note that the user has created."""
type Note implements Node {
  """
  The content of the note in HTML. If it's text (i.e. one line),\nit will most likely be converted to HTML by the TipTap editor.
  """
  content: String!

  """The date and time of creation of the note"""
  createdAt: DateTime!

  """The date the note was created"""
  date: Date!
  id: ID!

  """
  The slug of the note which needs to be unique.\nIt can be used to retrieve the note and update it.
  """
  slug: String!

  """The tags of the note"""
  tags: [NoteTag!]!

  """The title of the note"""
  title: String!

  """The date and time the note was last updated"""
  updatedAt: DateTime!
}

"""A tag that can be applied to a note."""
type NoteTag implements Node {
  """The color of the note tag in hex"""
  color: Color!

  """The date and time of creation of the note tag"""
  createdAt: DateTime!
  id: ID!

  """Whether notes with this tag should be private. (default: true)"""
  isPrivate: Boolean!

  """The name of the note tag"""
  name: String!

  """The notes with this tag"""
  notes(after: ID, before: ID, first: Int, last: Int): NoteTagNotesConnection!

  """The slug (i.e. the url-safe version) of the note tag name"""
  slug: String!
}

type NoteTagNotesConnection {
  edges: [NoteTagNotesConnectionEdge!]!
  pageInfo: PageInfo!
}

type NoteTagNotesConnectionEdge {
  cursor: ID!
  node: Note!
}

input NoteTagWhereInput {
  """Filter by whether the tag is for private use."""
  isPrivate: Boolean

  """Filter by name. Case insensitive."""
  nameIsLike: String
}

type Notifications {
  daysUpdated: [Day!]!
  itemsCreated: [Item!]!
  itemsDeleted: [Item!]!
  itemsUpdated: [Item!]!
  tasksCreated: [Task!]!
  tasksDeleted: [Task!]!
  tasksUpdated: [Task!]!
}

enum OrderBy {
  Asc
  Desc
}

type PageInfo {
  endCursor: ID
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID
}

type Plugin implements Node {
  authors: [PluginAuthor!]!
  createdAt: DateTime!
  iconUrl: String!
  id: ID!
  latestVersion: PluginVersion
  name: String!
  shortDescription: String!
  slug: String!
  updatedAt: DateTime!
  versions: [PluginVersion!]!
}

type PluginAuthor implements Node {
  avatarUrl: String
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type PluginInstallation {
  hasMobileRuntime: Boolean!
  hasServerRuntime: Boolean!
  hasWebRuntime: Boolean!
  latestVersion: PluginVersion
  slug: String!
  url: String!
  version: String!
}

"A plugin operation similar to making a request to /api/plugin/:pluginSlug/:operation, but it can be cached by Relay.\n\nThis is the recommended way to interact with the plugin's from the web app.\n\nIf you want to do a GET-like request, you can do it through `node` field if there are no parameters to pass. For example:\n```graphql\nquery {\n  node(id: \"PluginOperation_pluginSlug_operationName\") {\n    ... on PluginOperation {\n      id\n      data\n    }\n  }\n}\n```\nOr you can do it through `pluginOperation` field if there are parameters to pass. For example:\n```graphql\nquery {\n  pluginOperation(\n    input: {\n      pluginSlug: \"pluginSlug\",\n      operationName: \"operationName\",\n      data: { param1: \"value1\"}\n    }\n  ) {\n    id\n    data\n  }\n}\n```\n\nIf you want to do a POST-like request, you can do it through `pluginOperation` field in the Mutation type. For example:\n```graphql\nmutation {\n  pluginOperation(\n    input: {\n      pluginSlug: \"pluginSlug\",\n      operationName: \"operationName\",\n      data: { param1: \"value1\"}\n    }\n  ) {\n    id\n    data\n  }\n}\n\nWhat's the difference between `pluginOperation` field in the Query type and the Mutation type?\n- `pluginOperation` field in the Query type is used for GET-like requests and will get cached by Relay in the web app.\n- `pluginOperation` field in the Mutation type is used for POST-like requests and will invalidate any cached data from the `pluginOperation` field in the Query type and Relay will automatically update it's store.\n"
type PluginOperation implements Node {
  data: JSON
  id: ID!
}

type PluginVersion implements Node {
  createdAt: DateTime!
  id: ID!
  installUrl: String!
  isPrerelease: Boolean!
  updatedAt: DateTime!
  version: String!
}

"""Integers that will have a value greater than 0."""
scalar PositiveInt

"""Filter input of Date"""
input PrismaDateFilter {
  equals: Date
  gt: Date
  gte: Date
  in: [Date!]
  lt: Date
  lte: Date
  not: PrismaDateFilter
  notIn: [Date!]
}

"""Filter input of DateTime"""
input PrismaDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: PrismaDateTimeFilter
  notIn: [DateTime!]
}

"""Filter input of Int"""
input PrismaIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: PrismaIntFilter
  notIn: [Int!]
}

"""Filter input of JSON"""
input PrismaJsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  path: JSON
}

"""Filter input of String"""
input PrismaStringFilter {
  contains: String
  endsWith: String
  equals: String
  in: [String!]
  not: PrismaStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  canRefreshCalendarItems: Boolean!

  """
  Get days using a Relay connection.
  
  If no arguments are provided, it will return the current day.
  
  If `first` (Int) is provided, it will return the current day and the following days.
  
  If `after` (Date*) is provided, it will return the days after the given date.
  
  If `last` (Int) is provided, it will return the current day and the previous days.
  
  If `before` (Date*) is provided, it will return the days before the given date.
  
  *Ignore that the GraphQL type is ID as Pothos (the library used to build the GraphQL API) doesn't support overriding the type of the connection fields.
  Please input a Date in the format: YYYY-MM-DD
  """
  days(after: ID, before: ID, first: Int, last: Int): QueryDaysConnection!

  """Get all installed plugins."""
  installedPlugins: [PluginInstallation!]!

  """Whether the Flow instance is fully setup."""
  isFullySetup: Boolean!

  """Whether the password is set."""
  isPasswordSet: Boolean!

  """Whether the session is valid."""
  isSessionValid: Boolean!

  """
  Get all external items. Useuful to get list of items for a specific day to show in a calendar, or get items with inboxPoints to show in the inbox.
  By default, only items where `isRelevant` is true.
  Pass the `where` argument to override these defaults.
  """
  items(after: ID, before: ID, first: Int, last: Int, orderBy: ItemOrderBy, where: ItemFilter): QueryItemsConnection!

  """Get a list by its id or slug."""
  list(id: ID, slug: String): List

  """Get all lists."""
  lists(
    """
    The number of lists to return. If not provided, all lists will be returned.
    """
    first: PositiveInt
  ): [List!]!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!

  """Get a note by its `slug`."""
  note(
    """The slug of the note."""
    slug: String!
  ): Note

  """
  Get all note tags ordered by usage in descending order. `before` and `after` cursors are ignored, and `first` and `last` act the same and are limited to 100.
  """
  noteTags(
    after: ID
    before: ID
    first: Int
    last: Int

    """Filters to use when querying note tags."""
    where: NoteTagWhereInput
  ): QueryNoteTagsConnection!
  pluginOperation(input: QueryPluginOperationInput!): PluginOperation
  plugins(after: ID, before: ID, first: Int, last: Int): QueryPluginsConnection!

  """
  Render a template string with the given data. Plugin helpers and partials can be used in the template.
  """
  renderTemplate(input: QueryRenderTemplateInput!): String!

  """Get all routines."""
  routines: [Routine!]!

  """Get keyboard shortcuts."""
  shortcuts(after: ID, before: ID, first: Int, last: Int, orderBy: ShortcutOrderBy, where: ShortcutFilter): QueryShortcutsConnection!

  """
  Get store items.
  
  Pass the `pluginSlug` if you want to get items created by a specific plugin. Not passing the `pluginSlug` will return items created by flow.
  """
  storeItems(where: QueryStoreItemsInput): [Store!]!

  """
  Get all task tags ordered by usage in descending order. `before` and `after` cursors are ignored, and `first` and `last` act the same and are limited to 100.
  """
  taskTags(
    after: ID
    before: ID
    first: Int
    last: Int

    """Filters to use when querying task tags."""
    where: TaskTagWhereInput
  ): QueryTaskTagsConnection!

  """Get a template by its slug."""
  template(
    """The slug of the template."""
    slug: String!
  ): Template

  """The timezone set for the Flow instance. `null` if no timezone is set."""
  timezoneSet: String
}

type QueryDaysConnection {
  edges: [QueryDaysConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryDaysConnectionEdge {
  cursor: ID!
  node: Day!
}

type QueryItemsConnection {
  edges: [QueryItemsConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryItemsConnectionEdge {
  cursor: ID!
  node: Item!
}

type QueryNoteTagsConnection {
  edges: [QueryNoteTagsConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryNoteTagsConnectionEdge {
  cursor: ID!
  node: NoteTag!
}

input QueryPluginOperationInput {
  data: JSON
  operationName: String!
  pluginSlug: String!
}

type QueryPluginsConnection {
  edges: [QueryPluginsConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryPluginsConnectionEdge {
  cursor: ID!
  node: Plugin!
}

input QueryRenderTemplateInput {
  data: JSON!
  template: String!
}

type QueryShortcutsConnection {
  edges: [QueryShortcutsConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryShortcutsConnectionEdge {
  cursor: ID!
  node: Shortcut!
}

input QueryStoreItemsInput {
  keys: [String!]
  pluginSlug: String
}

type QueryTaskTagsConnection {
  edges: [QueryTaskTagsConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryTaskTagsConnectionEdge {
  cursor: ID!
  node: TaskTag!
}

enum RepetitionPattern {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

"""A routine the user has set up."""
type Routine implements Node {
  """Action name used on the button to start the routine"""
  actionName: String!

  """The date and time of creation of the routine"""
  createdAt: DateTime!

  """
  Whether the routine was done for the day. This can be null if the routine is queried outside of a day.
  """
  done: Boolean

  """
  Returns the first step in the routine. If there are no steps in the routine, it returns `null`.
  """
  firstStep: RoutineStep
  id: ID!

  """Whether the routine is active. This can be used to pause a routine."""
  isActive: Boolean!

  """The name of the routine"""
  name: String!

  """The pattern(s) the routine repeats on"""
  repeats: [RepetitionPattern!]!

  """The steps of the routine."""
  steps: [RoutineStep!]!

  """The time the routine takes place"""
  time: Time!
}

type RoutineStep implements Node {
  """Extra data to configure the step"""
  config: JSON

  """The ID of the step"""
  id: ID!

  """The plugin slug of the step"""
  pluginSlug: String!

  """The routine the step is in"""
  routine: Routine!

  """The id of routine the step is in"""
  routineId: ID!

  """
  Whether the step should be skipped if it has already been completed in the previous routine
  """
  shouldSkip: Boolean!

  """The step slug of the step"""
  stepSlug: String!

  """The templates the step uses"""
  templates: [Template!]!
}

input RoutineStepInput {
  config: JSONObject

  """
  The ID of the step if it exists. Leave empty or null to create a new step.
  """
  id: ID
  pluginSlug: String!
  shouldSkip: Boolean!
  stepSlug: String!
}

type Shortcut implements Node {
  """The date and time of creation of the shortcut"""
  createdAt: DateTime!

  """Focused element type"""
  elementId: String!

  """Whether the shortcut is enabled. This can be used to pause a shortcut."""
  enabled: Boolean!
  id: ID!

  """The plugin slug of the shortcut"""
  pluginSlug: String!

  """The slug of the shortcut"""
  slug: String!

  """
  How the shortcut is triggered (see type ShortcutTrigger in apps/web for more info)
  """
  trigger: [String!]!

  """The date and time the shortcut was last updated"""
  updatedAt: DateTime!
}

input ShortcutFilter {
  AND: [ShortcutFilter!]
  NOT: ShortcutFilter
  OR: [ShortcutFilter!]
  pluginSlug: PrismaStringFilter
  slug: PrismaStringFilter
  trigger: PrismaJsonFilter
}

input ShortcutOrderBy {
  createdAt: OrderBy
  slug: OrderBy
  updatedAt: OrderBy
}

"""
A key-value store containing settings the user has modified for both Flow and plugins (by convention, the key is prefixed with the plugin's slug), or configs and secrents that plugins have stored such as API keys.
"""
type Store implements Node {
  """The date and time of creation of the store item"""
  createdAt: DateTime!
  id: ID!

  """
  Whether the store item is secret.\nSecret items are automatically server-only as well (even if the value of isServerOnly is false)\nand can only be accessed by the plugin with the same pluginSlug.
  """
  isSecret: Boolean!

  """
  Whether the store item is server-only.\nServer-only items are not sent to the client.
  """
  isServerOnly: Boolean!

  """The key of the store item"""
  key: String!

  """The slug of the plugin the store item is linked to."""
  pluginSlug: String!

  """The date and time the store item was last updated"""
  updatedAt: DateTime!

  """The value of the store item."""
  value: JSON
}

type Subscription {
  """
  Get all external items. Useuful to get list of items for a specific day to show in a calendar, or get items with inboxPoints to show in the inbox.
  By default, only items where `isRelevant` is true.
  Pass the `where` argument to override these defaults.
  """
  items(after: ID, before: ID, first: Int, last: Int, orderBy: ItemOrderBy, where: ItemFilter): QueryItemsConnection!

  """Get a list by its id or slug."""
  list(id: ID, slug: String): List
  notifications: Notifications!
}

"""A task that the user or a plugin has created."""
type Task implements Node {
  """The date and time the task was completed."""
  completedAt: DateTime

  """The date and time of creation of the task"""
  createdAt: DateTime!

  """The date the task is scheduled for"""
  date: Date!

  """The length of time the task is expected to take."""
  durationInMinutes: Int
  id: ID!

  """The item linked to the task"""
  item: Item
  itemId: ID

  """The plugin datas of the task"""
  pluginDatas: [TaskPluginData!]!

  """The status of the task"""
  status: TaskStatus!

  """The subtasks of the task."""
  subtasks: [Task!]!

  """The tags of the task """
  tags: [TaskTag!]!

  """The title of the task in text or HTML."""
  title: String!
}

input TaskActionDataInput {
  data: JSON
  pluginSlug: String!
}

input TaskFilter {
  completedAt: PrismaDateTimeFilter
  date: PrismaDateFilter
  status: TaskStatusFilter
}

input TaskListFilter {
  every: TaskFilter
  none: TaskFilter
  some: TaskFilter
}

"""The data required by a plugin to be linked to a task."""
type TaskPluginData implements Node {
  """The date and time of creation of the task plugin data"""
  createdAt: DateTime!

  """The full data required by the plugin to be linked to the task."""
  full: JSON!
  id: ID!

  """The minimum data required to render the information on task cards."""
  min: JSON!

  """The slug of the plugin that created the data"""
  pluginSlug: String!

  """The date and time the task plugin data was last updated"""
  updatedAt: DateTime!
}

input TaskPluginDataInput {
  full: JSON
  min: JSON
  originalId: String
  pluginSlug: String!
}

enum TaskStatus {
  """When the task was decided not to be done anymore."""
  CANCELED

  """When the task is done."""
  DONE

  """When the task is planned or in progress."""
  TODO
}

input TaskStatusFilter {
  equals: TaskStatus
  in: [TaskStatus!]
  not: TaskStatusFilter
  notIn: [TaskStatus!]
}

"""A tag that can be applied to a task."""
type TaskTag implements Node {
  """The color of the task tag"""
  color: Color!

  """The date and time of creation of the task tag"""
  createdAt: DateTime!
  id: ID!

  """Whether tasks with this tag should be private. (default: true)"""
  isPrivate: Boolean!

  """The name of the task tag"""
  name: String!

  """The slug (i.e. the url-safe version) of the task tag name"""
  slug: String!

  """The tasks linked to the tag"""
  tasks(after: ID, before: ID, first: Int, last: Int): TaskTagTasksConnection!
}

type TaskTagTasksConnection {
  edges: [TaskTagTasksConnectionEdge!]!
  pageInfo: PageInfo!
}

type TaskTagTasksConnectionEdge {
  cursor: ID!
  node: Task!
}

input TaskTagWhereInput {
  """Filter by whether the tag is for private use."""
  isPrivate: Boolean

  """Filter by name. Case insensitive."""
  nameIsLike: String
}

type Template implements Node {
  """The date and time of creation of the template"""
  createdAt: DateTime!
  id: ID!

  """Extra data attached to the template."""
  metadata: JSON

  """The Handlebars template -- https://handlebarsjs.com/guide"""
  raw: String!

  """
  The rendered template given the data as input. If no data is given, the template will be rendered with the default metadata.
  """
  rendered(input: TemplateRenderedInput): String!

  """The routineStep (if any) the template is used in"""
  routineStep: RoutineStep!

  """The id of the routineStep (if any) the template is used in"""
  routineStepId: ID

  """The slug and id of the template"""
  slug: String!

  """The date and time the template was last updated"""
  updatedAt: DateTime!
}

input TemplateInput {
  """
  The ID of the template to update. Not required when creating a new template.
  """
  id: ID
  metadata: JSONObject

  """The ID of the routine step to link the template to."""
  routineStepId: ID
  slug: String!
  template: String!
}

input TemplateRenderedInput {
  data: JSONObject
}

"""
A time of day, represented as a string in the format `HH:mm`. For example, `16:20`.
"""
scalar Time