enum Color {
  amber
  blue
  cyan
  emerald
  fuchsia
  gray
  green
  indigo
  lime
  neutral
  orange
  pink
  purple
  red
  rose
  sky
  slate
  stone
  teal
  violet
  yellow
  zinc
}

input CreateNoteLabelInput {
  """The color of the label."""
  color: String!

  """The name of the label."""
  name: String!

  """The slug of the label. Defaults to dashcase version of the name."""
  slug: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A day a user has planned or already done.\nDays that have not yet been planned are virtually created in the GraphQL API.
"""
type Day implements Node {
  """The date of the day."""
  date: Date!
  id: ID!

  """The notes linked to the day."""
  notes: [Note!]!

  """The routines for the day in chronological order."""
  routines: [Routine!]!
  tasks: [Task!]!
}

"""
An item created by the user or a plugin. These items are then turned into tasks.\nIt can be a calendar event, a Trello task, a Linear issue, a GitHub request for review, a notification, etc.
"""
type Item implements Node {
  color: Color
  createdAt: DateTime!

  """
  The length of time the item is expected to take. If the item is all-day, this is null.
  """
  durationInMinutes: Int
  id: ID!

  """Whether the item is all-day on the date of `scheduledAt`."""
  isAllDay: Boolean

  """
  Whether the item is relevant to the user and should be shown. (default: true)\nFor example when a plugin creates an item for a Trello task, then later on the user arhives the task, the item is no longer relevant.
  """
  isRelevant: Boolean!

  """The plugin datas linked to the item"""
  pluginDatas: [ItemPluginData!]!
  scheduledAt: DateTime

  """
  The title of the item.\nIt is used as the initial title when creating a task from the item.
  """
  title: String!
}

"""The data a plugin links to an item."""
type ItemPluginData implements Node {
  createdAt: DateTime!
  full: JSON!
  id: ID!
  min: JSON!

  """The slug of the plugin that created the data"""
  pluginSlug: String!
  updatedAt: DateTime!
}

input ItemPluginDataInput {
  full: JSON!
  min: JSON!
  originalId: String
  pluginSlug: String!
}

input ItemWhereInput {
  """If set to true, it will return items where isRelevant is true."""
  isRelevant: Boolean = true

  """
  If set to true, it will return items where scheduledAt is today or null.
  """
  scheduledFor: Date
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""List of items"""
type List implements Node {
  createdAt: DateTime!

  """The description of the list"""
  description: String
  id: ID!

  """The items linked to the list"""
  items(after: ID, before: ID, first: Int, last: Int, where: ItemWhereInput): ListItemsConnection!

  """The name of the list"""
  name: String!

  """The slug (i.e. the url-safe version) of the list name"""
  slug: String!
}

type ListItemsConnection {
  edges: [ListItemsConnectionEdge!]!
  pageInfo: PageInfo!
}

type ListItemsConnectionEdge {
  cursor: ID!
  node: Item!
}

type Mutation {
  completeRoutine(input: MutationCompleteRoutineInput!): Boolean!

  """Create an item."""
  createItem(input: MutationCreateItemInput!): Item!

  """
  Updates a note if one exists with the passed in `slug`, otherwise creates a new note.
  """
  createOrUpdateNote(input: MutationCreateOrUpdateNoteInput!): Note!
  createRoutine(input: MutationCreateRoutineInput!): Routine!

  """Create a new task."""
  createTask(input: MutationCreateTaskInput!): Task!

  """
  Install a plugin. If a plugin with the same slug exists, it will throw an error, unless `override` is set to true.
  """
  installPlugin(input: MutationInstallPluginInput!): [PluginInstallation!]!
  pluginOperation(id: ID!, input: JSON): PluginOperation

  """Uninstall a plugin."""
  uninstallPlugin(input: MutationUninstallPluginInput!): [PluginInstallation!]!
  updateRoutineSteps(input: MutationUpdateRoutineStepsInput!): Routine!

  """Update a task."""
  updateTask(input: MutationUpdateTaskInput!): Task!

  """
  Update the date of a task and/or position of the task in the day, and get the updated days (as a list in chronological order).
  
  Input:
  - `id`: The ID of the task to update.
  - `date`: The new date of the task.
  - `after`: The ID of the task to place the task after. If `null`, the task will be placed at the beginning of the day.
  
  When the task is:
  - already in the desired date, it updates the order and returns the day.
  - moved to today, it updates the date and order but not the status, and returns the original day and today.
  - moved into the past, it updates the date and order, updates the status to `DONE` (if not already),
    and returns the original day and the new day.
  - moved into the future, it updates the date and order, updates the status to `TODO` (if not already),
    and returns the original day and the new day.
  """
  updateTaskDate(input: MutationUpdateTaskDateInput!): [Day!]!

  "Update the status of a task and get the updated days (as a list in chronological order).\n\nWhen the task is:\n- already in the desired status, it does nothing and returns an empty list.\n- for today, it updates the status and returns the day.\n- for a previous day and changing to `TODO`, it updates the status and\n  returns the original day and today.\n- for a future day and changing to `DONE` or `CANCELED`, it updates the status and\n  returns the original day and today.\n\nAny other scenario is not possible by nature of the app, where tasks:\n- in the past can only be `DONE` or `CANCELED` \n- in the future can only be in `TODO`\n    "
  updateTaskStatus(input: MutationUpdateTaskStatusInput!): [Day!]!

  """
  Creates a store item. If a store item with the same key exists, it will be updated.
  """
  upsertStoreItem(input: MutationUpsertStoreItemInput!): Store!
}

input MutationCompleteRoutineInput {
  """The date the routine was completed."""
  date: Date!

  """The ID of the routine that was completed."""
  routineId: ID!
}

input MutationCreateItemInput {
  color: Color
  durationInMinutes: Int
  isAllDay: Boolean

  """
  If set to true, it will return items where `isRelevant` is true. 
  
  `isRelevant` is used in the List component to only show relevant items. If the item becomes irrelevant (e.g. because the trello task was already completed), you can update the item to make this `isRelevant = false`
  """
  isRelevant: Boolean
  listId: ID
  pluginDatas: [ItemPluginDataInput!]
  scheduledAt: DateTime

  """The title of the item."""
  title: String!
}

input MutationCreateOrUpdateNoteInput {
  """The content of the note."""
  content: String!

  """The date of the note."""
  date: Date!

  """
  The IDs of exsiting labels to be linked to the note. If you want to create a new label, use the `newLabels` input.
  """
  labels: [ID!]

  """Create new labels and link them to the note."""
  newLabels: [CreateNoteLabelInput!]

  """The IDs of labels to be unlinked from the note."""
  removedLabels: [ID!]

  """The slug of the note. Used for retrieving the note back."""
  slug: String!

  """The title of the note."""
  title: String!
}

input MutationCreateRoutineInput {
  actionName: String!
  name: String!
  repeats: [RepetitionPattern!]!
  steps: [RoutineStepInput!]!
  time: Time!
}

input MutationCreateTaskInput {
  """The day (no time required) the task is planned for."""
  date: Date

  """The length of time (in minutes) the task is expected to take."""
  durationInMinutes: PositiveInt

  """The Relay ID of the Item that should be linked to the task."""
  itemId: ID

  """The initial status of the task. Defaults to `TODO`."""
  status: TaskStatus = TODO

  """The title of the task."""
  title: String!
}

input MutationInstallPluginInput {
  override: Boolean
  url: String!
}

input MutationUninstallPluginInput {
  slug: String!
}

input MutationUpdateRoutineStepsInput {
  """The ID of the routine to update."""
  routineId: ID!

  """The steps to update the routine with."""
  steps: [RoutineStepInput!]!
}

input MutationUpdateTaskDateInput {
  """The new date of the task."""
  date: Date!

  """The Relay ID of the task to update."""
  id: ID!

  """The new order of the tasks in the day the task is moved into."""
  newTasksOrder: [ID!]!
}

input MutationUpdateTaskInput {
  """The length of time (in minutes) the task is expected to take."""
  durationInMinutes: PositiveInt

  """The Relay ID of the task to update."""
  id: ID!

  """The title of the task."""
  title: String
}

input MutationUpdateTaskStatusInput {
  """The Relay ID of the task to update."""
  id: ID!

  """The new status of the task."""
  status: TaskStatus!

  """
  If true, the task will be done within Flow and other systems that plugins have connected to.
  """
  superDone: Boolean
}

input MutationUpsertStoreItemInput {
  isSecret: Boolean
  isServerOnly: Boolean
  key: String!
  pluginSlug: String
  value: JSON!
}

interface Node {
  id: ID!
}

"""A note that the user has created."""
type Note implements Node {
  """
  The content of the note in HTML. If it's text (i.e. one line),\nit will most likely be converted to HTML by the TipTap editor.
  """
  content: String!
  createdAt: DateTime!
  date: Date!
  id: ID!

  """The labels of the note"""
  labels: [NoteLabel!]!

  """
  The slug of the note which needs to be unique.\nIt can be used to retrieve the note and update it.
  """
  slug: String!

  """The title of the note"""
  title: String!
  updatedAt: DateTime!
}

"""A label that can be applied to a note."""
type NoteLabel implements Node {
  color: Color!
  createdAt: DateTime!
  id: ID!

  """Whether notes with this label should be private. (default: true)"""
  isPrivate: Boolean!

  """The name of the note label"""
  name: String!

  """The notes with this label"""
  notes(after: ID, before: ID, first: Int, last: Int): NoteLabelNotesConnection!

  """The slug (i.e. the url-safe version) of the note label name"""
  slug: String!
}

type NoteLabelNotesConnection {
  edges: [NoteLabelNotesConnectionEdge!]!
  pageInfo: PageInfo!
}

type NoteLabelNotesConnectionEdge {
  cursor: ID!
  node: Note!
}

input NoteLabelWhereInput {
  """Filter by whether the label is for private use."""
  isPrivate: Boolean

  """Filter by name. Case insensitive."""
  nameIsLike: String
}

type PageInfo {
  endCursor: ID
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID
}

type PluginInstallation {
  slug: String!
  url: String!
}

"A plugin operation similar to making a request to /api/plugin/:pluginSlug/:operation, but it can be cached by Relay.\n\nThis is the recommended way to interact with the plugin's from the web app.\n\nIf you want to do a GET-like request, you can do it through `node` field if there are no parameters to pass. For example:\n```graphql\nquery {\n  node(id: \"PluginOperation_pluginSlug_operationName\") {\n    ... on PluginOperation {\n      id\n      data\n    }\n  }\n}\n```\nOr you can do it through `pluginOperation` field if there are parameters to pass. For example:\n```graphql\nquery {\n  pluginOperation(pluginSlug: \"pluginSlug\", operationName: \"operationName\", input: { param1: \"value1\" }) {\n    id\n    data\n  }\n}\n```\n\nIf you want to do a POST-like request, you can do it through `pluginOperation` field in the Mutation type. For example:\n```graphql\nmutation {\n  pluginOperation(pluginSlug: \"pluginSlug\", operationName: \"operationName\", input: { param1: \"value1\" }) {\n    id\n    data\n  }\n}\n\nWhat's the difference between `pluginOperation` field in the Query type and the Mutation type?\n- `pluginOperation` field in the Query type is used for GET-like requests and will get cached by Relay in the web app.\n- `pluginOperation` field in the Mutation type is used for POST-like requests and will invalidate any cached data from the `pluginOperation` field in the Query type and Relay will automatically update it's store.\n"
type PluginOperation implements Node {
  data: JSON
  id: ID!
}

"""Integers that will have a value greater than 0."""
scalar PositiveInt

type Query {
  """
  Get days using a Relay connection.
  
  If no arguments are provided, it will return the current day.
  
  If `first` (Int) is provided, it will return the current day and the following days.
  
  If `after` (Date*) is provided, it will return the days after the given date.
  
  If `last` (Int) is provided, it will return the current day and the previous days.
  
  If `before` (Date*) is provided, it will return the days before the given date.
  
  *Ignore that the GraphQL type is ID as Pothos doesn't support overriding the type of the connection fields.
  Please input a Date in the format: YYYY-MM-DD
  """
  days(after: ID, before: ID, first: Int, last: Int): QueryDaysConnection!

  """Get all installed plugins."""
  installedPlugins: [PluginInstallation!]!

  """
  Get all external items. Useuful to get list of items for a specific day to show in a calendar.
  By default, only items where `isRelevant` is true.
  Pass the `where` argument to override these defaults.
  """
  items(after: ID, before: ID, first: Int, last: Int, where: ItemWhereInput): QueryItemsConnection!

  """Get all lists."""
  lists(
    """
    The number of lists to return. If not provided, all lists will be returned.
    """
    first: PositiveInt
  ): [List!]!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!

  """Get a note by its `slug`."""
  note(
    """The slug of the note."""
    slug: String!
  ): Note

  """
  Get all note labels ordered by usage in descending order. `before` and `after` cursors are ignored, and `first` and `last` act the same and are limited to 100.
  """
  noteLabels(
    after: ID
    before: ID
    first: Int
    last: Int

    """Filters to use when querying note labels."""
    where: NoteLabelWhereInput
  ): QueryNoteLabelsConnection!
  pluginOperation(id: ID!, input: JSON): PluginOperation

  """Get all routines."""
  routines: [Routine!]!

  """
  Get store items.
  
  Pass the `pluginSlug` if you want to get items created by a specific plugin. Not passing the `pluginSlug` will return items created by flow.
  """
  storeItems(input: QueryStoreItemsInput): [Store!]!

  """
  Get all task labels ordered by usage in descending order. `before` and `after` cursors are ignored, and `first` and `last` act the same and are limited to 100.
  """
  taskLabels(
    after: ID
    before: ID
    first: Int
    last: Int

    """Filters to use when querying task labels."""
    where: TaskLabelWhereInput
  ): QueryTaskLabelsConnection!
}

type QueryDaysConnection {
  edges: [QueryDaysConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryDaysConnectionEdge {
  cursor: ID!
  node: Day!
}

type QueryItemsConnection {
  edges: [QueryItemsConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryItemsConnectionEdge {
  cursor: ID!
  node: Item!
}

type QueryNoteLabelsConnection {
  edges: [QueryNoteLabelsConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryNoteLabelsConnectionEdge {
  cursor: ID!
  node: NoteLabel!
}

input QueryStoreItemsInput {
  keys: [String!]
  pluginSlug: String
}

type QueryTaskLabelsConnection {
  edges: [QueryTaskLabelsConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryTaskLabelsConnectionEdge {
  cursor: ID!
  node: TaskLabel!
}

enum RepetitionPattern {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

"""A routine the user has set up."""
type Routine implements Node {
  """Action name used on the button to start the routine"""
  actionName: String!
  createdAt: DateTime!

  """
  Whether the routine was done for the day. This can be null if the routine is queried outside of a day.
  """
  done: Boolean

  """
  Returns the first step in the routine. If there are no steps in the routine, it returns `null`.
  """
  firstStep: String
  id: ID!

  """Whether the routine is active. This can be used to pause a routine."""
  isActive: Boolean!

  """The name of the routine"""
  name: String!
  repeats: [RepetitionPattern!]!
  steps: [RoutineStep!]!
  time: Time!
}

"""
A step in a routine. To know which plugin the step belongs to, see `pluginSlug`.
"""
type RoutineStep {
  """The slug of the plugin that the step belongs to."""
  pluginSlug: String!

  """
  Whether the step should be skipped if the previous routine was done (i.e. routine.done = true).
  """
  shouldSkip: Boolean!

  """The slug of the step."""
  stepSlug: String!
}

input RoutineStepInput {
  pluginSlug: String!
  shouldSkip: Boolean!
  stepSlug: String!
}

"""
A key-value store containing settings the user has modified for both Flow and plugins (by convention, the key is prefixed with the plugin's slug), or configs and secrents that plugins have stored such as API keys.
"""
type Store implements Node {
  createdAt: DateTime!
  id: ID!

  """The key of the store item"""
  key: String!

  """The slug of the plugin the store item is linked to."""
  pluginSlug: String
  updatedAt: DateTime!
  value: JSON!
}

"""A task that the user or a plugin has created."""
type Task implements Node {
  canBeSuperdone: Boolean!
  completedAt: DateTime
  createdAt: DateTime!
  date: Date!

  """The length of time the task is expected to take."""
  durationInMinutes: Int
  id: ID!

  """The item linked to the task"""
  item: Item

  """The labels of the task """
  labels: [TaskLabel!]!

  """The plugin datas of the task"""
  pluginDatas: [TaskPluginData!]!
  status: TaskStatus!

  """The title of the task in text or HTML."""
  title: String!
}

"""A label that can be applied to a task."""
type TaskLabel implements Node {
  color: Color!
  createdAt: DateTime!
  id: ID!

  """Whether tasks with this label should be private. (default: true)"""
  isPrivate: Boolean!

  """The name of the task label"""
  name: String!

  """The slug (i.e. the url-safe version) of the task label name"""
  slug: String!
  tasks(after: ID, before: ID, first: Int, last: Int): TaskLabelTasksConnection!
}

type TaskLabelTasksConnection {
  edges: [TaskLabelTasksConnectionEdge!]!
  pageInfo: PageInfo!
}

type TaskLabelTasksConnectionEdge {
  cursor: ID!
  node: Task!
}

input TaskLabelWhereInput {
  """Filter by whether the label is for private use."""
  isPrivate: Boolean

  """Filter by name. Case insensitive."""
  nameIsLike: String
}

"""The data required by a plugin to be linked to a task."""
type TaskPluginData implements Node {
  createdAt: DateTime!
  full: JSON!
  id: ID!
  min: JSON!

  """The slug of the plugin that created the data"""
  pluginSlug: String!
  updatedAt: DateTime!
}

enum TaskStatus {
  """When the task was decided not to be done anymore."""
  CANCELED

  """When the task is done."""
  DONE

  """When the task is planned or in progress."""
  TODO
}

"""
A time of day, represented as a string in the format `HH:mm`. For example, `16:20`.
"""
scalar Time