"use strict";const U=e=>({plugin:e}),m="account-tokens",h="connected-calendars",p="default-calendar-id",P=U(e=>{const S=`${e.pluginSlug}-get-events`,w=`${e.pluginSlug}-calendars-sync`,f=`${e.pluginSlug}-upsert-item-from-event`,k=`${e.pluginSlug}-process-events-webhook`,v=`${e.pluginSlug}-cleanup-events`,C=`flow-${e.pluginSlug}-events-webhook-2024-05-26-1`,N=[w],$=[S,w,f,k,v],I=async()=>{const t=await e.store.getPluginItem(m);if(!t)throw new e.GraphQLError("User not authenticated.",{extensions:{code:"NOT_AUTHENTICATED",userFriendlyMessage:"You are not authenticated and will need to connect your Google account first."}});return t.value},y=async t=>{const n=(t.accountsTokens??await I())[t.account];if(!n)throw new e.GraphQLError("User not authenticated.",{extensions:{code:"NOT_AUTHENTICATED",userFriendlyMessage:"You are not authenticated and will need to connect your Google account first."}});if(e.dayjs().isAfter(n.expires_at)){const s=await fetch("https://google-calendar-api-flow-dev.vercel.app/api/auth/refresh?refresh_token="+n.refresh_token);if(!s.ok){const o=e.dayjs().utc(!0).startOf("day").toDate();throw await e.prisma.task.findFirst({where:{date:{gte:o},pluginDatas:{some:{originalId:"not-authenticated",pluginSlug:e.pluginSlug}}}})||await e.prisma.task.create({data:{title:'<a href="/settings/plugin/google-calendar">Reconnect</a> your Google Calendar account. There was an issue with the connection.',pluginDatas:{create:{pluginSlug:e.pluginSlug,originalId:"not-authenticated",min:{},full:{}}},day:{connectOrCreate:{where:{date:o},create:{date:o,tasksOrder:[]}}}}}),await e.pgBoss.send(v,{}),new e.GraphQLError("Could not refresh token.",{extensions:{code:"COULD_NOT_REFRESH_TOKEN",userFriendlyMessage:"Could not connect to Google Calendar. Please try connecting your account(s) again."}})}const a=await s.json(),r={...a,refresh_token:n.refresh_token,expires_at:e.dayjs().add((a.expires_in??10)-10,"seconds").toISOString()};return await e.store.setSecretItem(m,{...t.accountsTokens,[t.account]:r}),r}return n},O=async t=>{const u=await e.store.getPluginItem(h).then(n=>(n==null?void 0:n.value.map(s=>s.calendarId))??[]);return await e.pgBoss.send(w,{calendarIds:u??[],days:t.days??7}),{data:"Job sent to refresh events."}},A=async t=>{var T,_,E,B,j,D,b;const u=await e.getUsersTimezone()??"Etc/GMT-0",n=!!((T=t.event.start)!=null&&T.date),s=(_=t.event.start)!=null&&_.date?e.dayjs(t.event.start.date).startOf("day"):(E=t.event.start)!=null&&E.dateTime?e.dayjs(t.event.start.dateTime):e.dayjs(),a=(B=t.event.end)!=null&&B.date?e.dayjs(t.event.end.date).endOf("day"):(j=t.event.end)!=null&&j.dateTime?e.dayjs(t.event.end.dateTime):s.add(1,"millisecond"),r=a.isBefore(e.dayjs()),o=s.tz(u).utc(!0).toISOString(),l=t.event.status!=="cancelled"||a.isBefore(e.dayjs()),c={title:t.event.summary??"No title",color:t.event.calendarColor?e.getNearestItemColor(t.event.calendarColor):null,isAllDay:!!((D=t.event.start)!=null&&D.date),scheduledAt:s.toISOString(),durationInMinutes:n?null:Math.abs(e.dayjs(s).diff(a,"minute")),isRelevant:l,inboxPoints:t.event.status==="tentative"?10:null},i={eventType:t.event.eventType,status:t.event.status,htmlLink:t.event.htmlLink,numOfAttendees:((b=t.event.attendees)==null?void 0:b.length)??0,conferenceData:t.event.conferenceData,hexBackgroundColor:t.event.calendarColor},d={...t.event,...i},g={title:c.title,completedAt:r?a.toISOString():null,status:t.event.status==="cancelled"?"CANCELED":r?"DONE":"TODO",day:{connectOrCreate:{where:{date:o},create:{date:o,tasksOrder:t.taskId?[t.taskId]:[]}}}};return{itemInfo:{commonBetweenUpdateAndCreate:c,min:i,full:d,isRelevant:l,scheduledStart:s,scheduledEnd:a},taskInfo:{commonBetweenUpdateAndCreate:g,min:i,full:d}}};return{onRequest:async t=>{var u,n;if(t.path==="/auth")return Response.redirect(`https://google-calendar-api-flow-dev.vercel.app/api/auth?api_endpoint=${e.serverOrigin}/api/plugin/${e.pluginSlug}/auth/callback`);if(t.path==="/auth/callback"&&t.request.method==="POST"){const s=await e.store.getPluginItem(m),a=t.body,r={...a,refresh_token:a.refresh_token??((u=s==null?void 0:s.value)==null?void 0:u[a.email].refresh_token),expires_at:e.dayjs().add((a.expires_in??10)-10,"seconds").toISOString()};return"expires_in"in r&&delete r.expires_in,await e.store.setSecretItem(m,{...(s==null?void 0:s.value)??{},[r.email]:r}),new Response}else if(t.path==="/events/webhook"&&t.request.method==="POST"){const s=t.headers["x-goog-resource-uri"],a=(n=s.match(/\/calendars\/(.*)\/events/))==null?void 0:n[1];if(!a)return console.log("❌ Could not find calendarId in x-goog-resource-uri header",s),new Response;const r=decodeURIComponent(a);return await e.pgBoss.send(k,{calendarId:r}),new Response}},operations:{calendars:async()=>{const t=await I(),u=[];for(const n of Object.keys(t)){const s=await y({account:n,accountsTokens:t}).catch(o=>({error:o}));if("error"in s){u.push({account:n,authError:s.error.extensions.userFriendlyMessage??s.error.message});continue}const a=await fetch("https://www.googleapis.com/calendar/v3/users/me/calendarList",{headers:{Authorization:`Bearer ${s.access_token}`}}).then(o=>o.json()).then(o=>o.items),r=await e.store.getPluginItem(h).then(o=>{var l;return new Set(((l=o==null?void 0:o.value)==null?void 0:l.map(c=>c.calendarId))??[])});u.push({account:n,calendars:(a==null?void 0:a.map(o=>({...o,connected:r.has(o.id??"")})))??[]})}return{data:u}},connectCalendars:async t=>{const u=await I();let n=await e.store.getPluginItem(p).then(r=>r==null?void 0:r.value);const s=await e.store.getPluginItem(h).then(r=>{var o;return new Map(((o=r==null?void 0:r.value)==null?void 0:o.map(l=>[l.calendarId,l]))??[])}),a=[];for(const r of Object.keys(u)){const o=await y({account:r,accountsTokens:u}),l=await fetch("https://www.googleapis.com/calendar/v3/users/me/calendarList",{headers:{Authorization:`Bearer ${o.access_token}`}}).then(c=>c.json()).then(c=>c.items??[]);for(const c of t.calendarIds){if(s.has(c)||!l.some(g=>g.id===c))continue;await e.pgBoss.send(S,{calendarId:c,days:7});const i=`${e.serverOrigin}/api/plugin/${e.pluginSlug}/events/webhook`;let d=await fetch(`https://www.googleapis.com/calendar/v3/calendars/${c}/events/watch`,{method:"POST",headers:{Authorization:`Bearer ${o.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({id:C,type:"web_hook",address:i})}).then(async g=>g.ok?g.json():(console.log("❌ Failed to set up webhook for calendar",c,i,g.status,await g.text()),null));d&&(console.log("✔ Set up webhook for calendar",c,i),n||(n={account:r,id:c}),s.set(c,{account:r,calendarId:c,lastSyncedAt:e.dayjs().toISOString(),channelId:d.id??C,resourceId:d.resourceId,expiresAt:e.dayjs(d.expiration??0).toISOString(),default:(n==null?void 0:n.id)===c}))}for(const c of l){if(!c.id||t.calendarIds.includes(c.id))continue;const i=s.get(c.id);if(!i)continue;const d=await fetch("https://www.googleapis.com/calendar/v3/channels/stop",{method:"POST",headers:{Authorization:`Bearer ${o.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({resource:{id:i.channelId,resourceId:i.resourceId},id:i.channelId,resourceId:i.resourceId})});if(!d.ok){console.log("❌ Failed to remove webhook for calendar",c.id,i.channelId,i.resourceId,d.status,await d.text());continue}console.log("✔ Removed webhook for calendar",c.id),s.delete(c.id)}a.push({account:r,calendars:l.map(c=>({...c,connected:s.has(c.id??"")}))??[]})}return await e.store.setItem(h,Array.from(s.values())),n&&await e.store.setItem(p,n),await e.pgBoss.schedule(w,"0 3 */3 * *",{calendarIds:t.calendarIds}),console.log("✔ Scheduled calendars sync job"),{operationName:"calendars",data:a}},disconnectAccount:async t=>{const u=await I(),n=u[t.accountId];if(!n)return{data:"Account not connected."};const s=await e.store.getPluginItem(h).then(a=>(a==null?void 0:a.value)??[]);for(const a of s.filter(r=>r.account===t.accountId)){const r=await fetch("https://www.googleapis.com/calendar/v3/channels/stop",{method:"POST",headers:{Authorization:`Bearer ${n.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({resource:{id:a.channelId,resourceId:a.resourceId},id:a.channelId,resourceId:a.resourceId})});if(!r.ok){console.log("❌ Failed to remove webhook for calendar",a.calendarId,a.channelId,a.resourceId,r.status,await r.text());continue}console.log("✔ Removed webhook for calendar",a.calendarId)}return await e.store.setItem(h,s.filter(a=>a.account!==t.accountId)),await e.store.setItem(m,Object.fromEntries(Object.entries(u).filter(([a])=>a!==t.accountId))),{data:"Account disconnected."}},refreshEvents:O},handlePgBossWork:t=>[t(f,{batchSize:5},async u=>{var n,s,a;for(const r of u){const o=r.data,l=await e.prisma.item.findFirst({where:{pluginDatas:{some:{originalId:o.id,pluginSlug:e.pluginSlug}}},include:{pluginDatas:{where:{originalId:o.id,pluginSlug:e.pluginSlug},select:{id:!0}},tasks:{select:{id:!0,pluginDatas:{select:{id:!0},take:1,orderBy:{createdAt:"asc"}}},take:1,orderBy:{createdAt:"asc"}}}});if(!l&&o.status==="cancelled")continue;if(!l&&["outOfOffice","workingLocation"].includes(o.eventType??"default"))continue;if(!o.summary||o.summary.trim()==="")if(l)o.summary=l.title;else continue;const c=l==null?void 0:l.tasks[0],{itemInfo:i,taskInfo:d}=await A({event:o,taskId:c==null?void 0:c.id});if(l?await e.prisma.item.update({where:{id:l.id},data:{...i.commonBetweenUpdateAndCreate,pluginDatas:{update:{where:{id:(n=l.pluginDatas[0])==null?void 0:n.id},data:{min:i.min,full:i.full}}},tasks:{upsert:{where:{id:c==null?void 0:c.id},update:{...d.commonBetweenUpdateAndCreate,pluginDatas:{update:{where:{id:(s=c==null?void 0:c.pluginDatas[0])==null?void 0:s.id},data:{min:d.min,full:d.full}}}},create:{...d.commonBetweenUpdateAndCreate,pluginDatas:{create:{pluginSlug:e.pluginSlug,originalId:o.id,min:d.min,full:d.full}}}}}}}):await e.prisma.item.create({data:{...i.commonBetweenUpdateAndCreate,pluginDatas:{create:{pluginSlug:e.pluginSlug,originalId:o.id,min:i.min,full:i.full}},tasks:{create:{...d.commonBetweenUpdateAndCreate,pluginDatas:{create:{pluginSlug:e.pluginSlug,originalId:o.id,min:d.min,full:d.full}}}}}}),console.log("✔ Upserted item from event",o.summary,(a=i.scheduledStart)==null?void 0:a.toISOString()),!i.isRelevant)return;const g=e.dayjs(i.scheduledEnd).add(1,"second");if(g.isBefore(e.dayjs()))return;await e.pgBoss.sendAfter(f,{...o},{singletonKey:o.id,singletonMinutes:1},g.toDate()),console.log("Scheduled event to be updated after",g.toISOString())}}),t(S,async u=>{var a,r;const n=u.data,s=await I();for(const o of Object.keys(s)){const l=await y({account:o,accountsTokens:s}),c=await fetch(`https://www.googleapis.com/calendar/v3/calendars/${n.calendarId}`,{headers:{Authorization:`Bearer ${l.access_token}`}}).then(d=>d.json()),i=await fetch(`https://www.googleapis.com/calendar/v3/calendars/${n.calendarId}/events?timeMin=${encodeURIComponent(e.dayjs().startOf("day").toISOString())}&timeMax=${encodeURIComponent(e.dayjs().add(n.days??7,"day").toISOString())}&singleEvents=true&orderBy=startTime`,{headers:{Authorization:`Bearer ${l.access_token}`}}).then(d=>d.json());console.log(((a=i.items)==null?void 0:a.length)??0,((r=i.items)==null?void 0:r.length)===1?"event":"events","to process from initial sync of calendar",n.calendarId);for(const d of i.items??[])await e.pgBoss.send(f,{...d,calendarColor:c.backgroundColor??null},{singletonKey:d.id,singletonMinutes:1})}}),t(k,async u=>{var c,i;const n=u.data,s=await e.store.getPluginItem(h).then(d=>(d==null?void 0:d.value)??[]),a=s.find(d=>d.calendarId===n.calendarId);if(!a){console.log("❌ Could not find calendar to process",n.calendarId);return}const r=await y({account:a.account}),o=await fetch(`https://www.googleapis.com/calendar/v3/calendars/${n.calendarId}`,{headers:{Authorization:`Bearer ${r.access_token}`}}).then(d=>d.json()),l=await fetch(`https://www.googleapis.com/calendar/v3/calendars/${n.calendarId}/events?updatedMin=${encodeURIComponent(e.dayjs(a.lastSyncedAt).toISOString())}&singleEvents=true&orderBy=updated`,{headers:{Authorization:`Bearer ${r.access_token}`}}).then(d=>d.json());console.log(((c=l.items)==null?void 0:c.length)??0,((i=l.items)==null?void 0:i.length)===1?"event":"events","to process from webhook of calendar",n.calendarId);for(const d of l.items??[])await e.pgBoss.send(f,{...d,calendarColor:o.backgroundColor??null},{singletonKey:d.id,singletonMinutes:1});await e.store.setItem(h,[...s.filter(d=>d.calendarId!==n.calendarId),{...a,lastSyncedAt:e.dayjs().toISOString()}])}),t(w,async u=>{const n=u.data;for(const s of n.calendarIds)await e.pgBoss.send(S,{calendarId:s,days:n.days??7})}),t(v,async()=>{const u=await e.getUsersTimezone(),n=e.dayjs().tz(u??void 0).endOf("day").add(1,"week");await e.prisma.task.deleteMany({where:{date:{gte:n.toDate()},pluginDatas:{some:{pluginSlug:e.pluginSlug}}}}),await e.prisma.item.deleteMany({where:{scheduledAt:{gte:n.toDate()},pluginDatas:{some:{pluginSlug:e.pluginSlug}}}})})],onUninstall:async()=>{await e.pgBoss.send(v,{}),await e.store.deleteItem(h),await e.store.deleteItem(m),await Promise.all(N.map(t=>e.pgBoss.unschedule(t))),await Promise.all($.map(t=>e.pgBoss.cancel(t)))},onCreateCalendarItem:async({item:t})=>{var c;const u=await e.store.getPluginItem(p).then(i=>i==null?void 0:i.value);if(!u)return;const n=await y({account:u.account}),s=await fetch(`https://www.googleapis.com/calendar/v3/calendars/${u.id}`,{headers:{Authorization:`Bearer ${n.access_token}`}}).then(i=>i.json());console.log("📅 Creating Google calendar event from Flow item",t.id);let a=await fetch(`https://www.googleapis.com/calendar/v3/calendars/${u.id}/events`,{method:"POST",headers:{Authorization:`Bearer ${n.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({summary:t.title,start:{dateTime:e.dayjs(t.scheduledAt).toISOString()},end:{dateTime:e.dayjs(t.scheduledAt).add(t.durationInMinutes??30,"minute").toISOString()}})}).then(i=>i.json());if(!a)return;console.log("✔ Created event in Google Calendar",u.id,a.id),a={...a,calendarColor:s.backgroundColor??null};const r=(c=t.tasks[0])==null?void 0:c.id,{itemInfo:o,taskInfo:l}=await A({event:a,taskId:r});await e.prisma.item.update({where:{id:t.id},data:{...o.commonBetweenUpdateAndCreate,pluginDatas:{create:{pluginSlug:e.pluginSlug,originalId:a.id,min:o.min,full:o.full}}}}),await e.prisma.task.update({where:{id:r},data:{...l.commonBetweenUpdateAndCreate,pluginDatas:{create:{pluginSlug:e.pluginSlug,originalId:a.id,min:l.min,full:l.full}}}})},onRefreshCalendarItems:async()=>{await O({days:7})}}});module.exports=P;
