"use strict";const $=e=>({plugin:e}),k="account-tokens",p="connected-calendars",R=$(e=>{const v=`${e.pluginSlug}-get-events`,O=`${e.pluginSlug}-calendars-sync`,_=`${e.pluginSlug}-upsert-item-from-event`,A=`${e.pluginSlug}-process-events-webhook`,j=`flow-${e.pluginSlug}-events-webhook`,S=async()=>{const s=await e.store.getPluginItem(k);if(!s)throw new e.GraphQLError("User not authenticated.",{extensions:{code:"NOT_AUTHENTICATED",userFriendlyMessage:"You are not authenticated and will need to connect your Google account first."}});return s.value},I=async s=>{const t=(s.accountsTokens??await S())[s.account];if(!t)throw new e.GraphQLError("User not authenticated.",{extensions:{code:"NOT_AUTHENTICATED",userFriendlyMessage:"You are not authenticated and will need to connect your Google account first."}});if(e.dayjs().isAfter(t.expires_at)){const o=await fetch("https://google-calendar-api-flow-dev.vercel.app/api/auth/refresh?refresh_token="+t.refresh_token);if(!o.ok)throw new Error("COULD_NOT_REFRESH_TOKEN: Could not refresh token.");const a=await o.json(),d={...a,refresh_token:t.refresh_token,expires_at:e.dayjs().add((a.expires_in??10)-10,"seconds").toISOString()};return await e.store.setSecretItem(k,{...s.accountsTokens,[s.account]:d}),d}return t};return{onRequest:async s=>{var l,t;if(s.path==="/auth")return Response.redirect(`https://google-calendar-api-flow-dev.vercel.app/api/auth?api_endpoint=${e.serverOrigin}/api/plugin/${e.pluginSlug}/auth/callback`);if(s.path==="/auth/callback"&&s.request.method==="POST"){const o=await e.store.getPluginItem(k),a=s.body,d={...a,refresh_token:a.refresh_token??((l=o==null?void 0:o.value)==null?void 0:l[a.email].refresh_token),expires_at:e.dayjs().add((a.expires_in??10)-10,"seconds").toISOString()};return"expires_in"in d&&delete d.expires_in,await e.store.setSecretItem(k,{...(o==null?void 0:o.value)??{},[d.email]:d}),new Response}else if(s.path==="/events/webhook"&&s.request.method==="POST"){const o=s.headers["x-goog-resource-uri"],a=(t=o.match(/\/calendars\/(.*)\/events/))==null?void 0:t[1];if(!a)return console.log("❌ Could not find calendarId in x-goog-resource-uri header",o),new Response;const d=decodeURIComponent(a);return await e.pgBoss.send(A,{calendarId:d}),new Response}},operations:{calendars:async()=>{const s=await S(),l=[];for(const t of Object.keys(s)){const o=await I({account:t,accountsTokens:s}),a=await fetch("https://www.googleapis.com/calendar/v3/users/me/calendarList",{headers:{Authorization:`Bearer ${o.access_token}`}}).then(c=>c.json()).then(c=>c.items),d=await e.store.getPluginItem(p).then(c=>{var n;return new Set(((n=c==null?void 0:c.value)==null?void 0:n.map(u=>u.calendarId))??[])});l.push({account:t,calendars:(a==null?void 0:a.map(c=>({...c,connected:d.has(c.id??"")})))??[]})}return{data:l}},connectCalendars:async s=>{const l=await S(),t=await e.store.getPluginItem(p).then(a=>{var d;return new Map(((d=a==null?void 0:a.value)==null?void 0:d.map(c=>[c.calendarId,c]))??[])}),o=[];for(const a of Object.keys(l)){const d=await I({account:a,accountsTokens:l}),c=await fetch("https://www.googleapis.com/calendar/v3/users/me/calendarList",{headers:{Authorization:`Bearer ${d.access_token}`}}).then(n=>n.json()).then(n=>n.items);for(const n of s.calendarIds){if(t.has(n)||!(c!=null&&c.some(g=>g.id===n)))continue;await e.pgBoss.send(v,{calendarId:n,days:7});const u=await fetch(`https://www.googleapis.com/calendar/v3/calendars/${n}/events/watch`,{method:"POST",headers:{Authorization:`Bearer ${d.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({id:j,type:"web_hook",address:`${e.serverOrigin}/api/plugin/${e.pluginSlug}/events/webhook`})}).then(g=>g.json());console.log("✔ Set up webhook for calendar",n),t.set(n,{account:a,calendarId:n,lastSyncedAt:e.dayjs().toISOString(),channelId:u.id??j,resourceId:u.resourceId,expiresAt:e.dayjs(u.expiration??0).toISOString()})}for(const n of c??[]){if(!n.id||s.calendarIds.includes(n.id))continue;const u=t.get(n.id);u&&(await fetch("https://www.googleapis.com/calendar/v3/channels/stop",{method:"POST",headers:{Authorization:`Bearer ${d.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({id:u.channelId,resourceId:u.resourceId})}),console.log("✔ Removed webhook for calendar",n.id),t.delete(n.id))}o.push({account:a,calendars:(c==null?void 0:c.map(n=>({...n,connected:t.has(n.id??"")})))??[]})}return await e.store.setItem(p,Array.from(t.values())),await e.pgBoss.schedule(O,"0 3 */3 * *",{calendarIds:s.calendarIds}),console.log("✔ Scheduled calendars sync job"),{operationName:"calendars",data:o}},refreshEvents:async s=>{const l=await e.store.getPluginItem(p).then(t=>(t==null?void 0:t.value.map(o=>o.calendarId))??[]);return await e.pgBoss.send(O,{calendarIds:l??[],days:s.days??7}),{data:"Job sent to refresh events."}}},handlePgBossWork:s=>[s(_,{batchSize:5},async l=>{var t,o,a,d,c,n,u,g;for(const i of l){const r=i.data,w=await e.prisma.item.findFirst({where:{pluginDatas:{some:{originalId:r.id,pluginSlug:e.pluginSlug}}},include:{pluginDatas:{where:{originalId:r.id,pluginSlug:e.pluginSlug},select:{id:!0}},tasks:{select:{id:!0,pluginDatas:{select:{id:!0},take:1,orderBy:{createdAt:"asc"}}},take:1,orderBy:{createdAt:"asc"}}}});if(!w&&r.status==="cancelled")continue;const b=await e.getUsersTimezone()??"Etc/GMT-0",h=w==null?void 0:w.tasks[0],D=!!((t=r.start)!=null&&t.date),f=(o=r.start)!=null&&o.date?e.dayjs(r.start.date).startOf("day"):(a=r.start)!=null&&a.dateTime?e.dayjs(r.start.dateTime):e.dayjs(),T=(d=r.end)!=null&&d.date?e.dayjs(r.end.date).endOf("day"):(c=r.end)!=null&&c.dateTime?e.dayjs(r.end.dateTime):f.add(1,"millisecond"),B=T.isBefore(e.dayjs()),N=f.tz(b).utc(!0).format("YYYY-MM-DD"),E={title:r.summary??"No title",color:r.calendarColor?e.getNearestItemColor(r.calendarColor):null,isAllDay:D,scheduledAt:f.toISOString(),durationInMinutes:D?null:e.dayjs(f).diff(T,"minute"),isRelevant:r.status!=="cancelled"},m={status:r.status,htmlLink:r.htmlLink,numOfAttendees:((n=r.attendees)==null?void 0:n.length)??0,conferenceData:r.conferenceData,hexBackgroundColor:r.calendarColor},y={...r,...m,eventType:r.eventType},C={title:E.title,completedAt:B?T.toISOString():null,status:r.status!=="cancelled"?"CANCELED":B?"DONE":"TODO",day:{connectOrCreate:{where:{date:N},create:{date:N,tasksOrder:h!=null&&h.id?[h.id]:[]}}}};w?await e.prisma.item.update({where:{id:w.id},data:{...E,pluginDatas:{update:{where:{id:(u=w.pluginDatas[0])==null?void 0:u.id},data:{min:m,full:y}}},tasks:{upsert:{where:{id:h==null?void 0:h.id},update:{...C,pluginDatas:{update:{where:{id:(g=h==null?void 0:h.pluginDatas[0])==null?void 0:g.id},data:{min:m,full:y}}}},create:{...C,pluginDatas:{create:{pluginSlug:e.pluginSlug,originalId:r.id,min:m,full:y}}}}}}}):await e.prisma.item.create({data:{...E,pluginDatas:{create:{pluginSlug:e.pluginSlug,originalId:r.id,min:m,full:y}},tasks:{create:{...C,pluginDatas:{create:{pluginSlug:e.pluginSlug,originalId:r.id,min:m,full:y}}}}}}),console.log("✔ Upserted item from event",r.summary,f==null?void 0:f.toISOString())}}),s(v,async l=>{var a,d;const t=l.data,o=await S();for(const c of Object.keys(o)){const n=await I({account:c,accountsTokens:o}),u=await fetch(`https://www.googleapis.com/calendar/v3/calendars/${t.calendarId}`,{headers:{Authorization:`Bearer ${n.access_token}`}}).then(i=>i.json()),g=await fetch(`https://www.googleapis.com/calendar/v3/calendars/${t.calendarId}/events?timeMin=${encodeURIComponent(e.dayjs().startOf("day").toISOString())}&timeMax=${encodeURIComponent(e.dayjs().add(t.days??7,"day").toISOString())}&singleEvents=true&orderBy=startTime`,{headers:{Authorization:`Bearer ${n.access_token}`}}).then(i=>i.json());console.log(((a=g.items)==null?void 0:a.length)??0,((d=g.items)==null?void 0:d.length)===1?"event":"events","to process from initial sync of calendar",t.calendarId);for(const i of g.items??[])await e.pgBoss.send(_,{...i,calendarColor:u.backgroundColor??null})}}),s(A,async l=>{var u,g;const t=l.data,o=await e.store.getPluginItem(p).then(i=>(i==null?void 0:i.value)??[]),a=o.find(i=>i.calendarId===t.calendarId);if(!a){console.log("❌ Could not find calendar to process",t.calendarId);return}const d=await I({account:a.account}),c=await fetch(`https://www.googleapis.com/calendar/v3/calendars/${t.calendarId}`,{headers:{Authorization:`Bearer ${d.access_token}`}}).then(i=>i.json()),n=await fetch(`https://www.googleapis.com/calendar/v3/calendars/${t.calendarId}/events?updatedMin=${encodeURIComponent(e.dayjs(a.lastSyncedAt).toISOString())}&singleEvents=true&orderBy=updated`,{headers:{Authorization:`Bearer ${d.access_token}`}}).then(i=>i.json());console.log(((u=n.items)==null?void 0:u.length)??0,((g=n.items)==null?void 0:g.length)===1?"event":"events","to process from webhook of calendar",t.calendarId);for(const i of n.items??[])await e.pgBoss.send(_,{...i,calendarColor:c.backgroundColor??null});await e.store.setItem(p,[...o.filter(i=>i.calendarId!==t.calendarId),{...a,lastSyncedAt:e.dayjs().toISOString()}])}),s(O,async l=>{const t=l.data;for(const o of t.calendarIds)await e.pgBoss.send(v,{calendarId:o,days:t.days??7})})]}});module.exports=R;
