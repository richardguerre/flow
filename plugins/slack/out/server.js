"use strict";const O=e=>({plugin:e}),$="post-to-slack",M=e=>{const k=e!=null&&e.withLinear?'{{#linear-issue-exists}} - <a href="{{linear-issue-link}}">{{linear-issue-id}}</a>{{/linear-issue-exists}}':"";return`Plan for today
<ul>
  {{#tasks}}
    <li>{{slack-status}} {{title-without-tags}}${k}</li>
  {{else}}
    <li>No tasks</li> 
  {{/tasks}}
  {{! Do not remove the extra curly braces around the slack-future-tasks block.}}
  {{{{slack-future-tasks}}}}
    <li>{{slack-status}} {{title-without-tags}}${k}</li>
  {{{{/slack-future-tasks}}}}
</ul>`},p="account-tokens",A="slack-cached-channels",L=O(e=>{const k="update-slack-messages",I="update-cached-channels",S=async()=>{const t=await e.store.getPluginItem(p);if(!t)throw new e.GraphQLError("User not authenticated.",{extensions:{code:"NOT_AUTHENTICATED",userFriendlyMessage:"You are not authenticated and will need to connect your Slack account(s) first."}});return t.value},y={TODO:"",DONE:"✅",CANCELED:"❌"},_=async t=>{const a=e.html.parse(t).querySelectorAll("slack-status").map(i=>{var h;if(!i.attributes["data-task-id"])return null;const o=(h=e.decodeGlobalId(i.attributes["data-task-id"]))==null?void 0:h.id;return o?parseInt(o):null}).filter(i=>i!==null);return await e.prisma.task.findMany({where:{id:{in:a}}}).then(i=>new Map(i.map(o=>[o.id,o])))},N=t=>e.html.parse(t).querySelectorAll("slack-message").map(c=>({teamId:c.attributes["data-team-id"],channelId:c.attributes["data-channel-id"],ts:c.attributes["data-ts"]})),E=async t=>{var i,o;const a=await S().catch(()=>null),c=[];for(const h in a){const d=a[h],n=d.access_token??d.authed_user.access_token,u=await fetch("https://slack.com/api/conversations.list?exclude_archived=true&limit=999",{headers:{Authorization:`Bearer ${n}`}}).then(async r=>await r.json()).catch(()=>null);if(!(u!=null&&u.ok))continue;c.push(...u.channels.map(r=>({id:r.id,name:r.name,team:{id:d.team.id,name:d.team.name,icon:d.team.icon.image_44}})));let s=(i=u.response_metadata)==null?void 0:i.next_cursor;for(;s;){const r=await fetch(`https://slack.com/api/conversations.list?exclude_archived=true&limit=999&cursor=${s}`,{headers:{Authorization:`Bearer ${n}`}}).then(async l=>await l.json()).catch(()=>null);if(!(r!=null&&r.ok))break;c.push(...r.channels.map(l=>({id:l.id,name:l.name,team:{id:d.team.id,name:d.team.name,icon:d.team.icon.image_44}}))),s=(o=r.response_metadata)==null?void 0:o.next_cursor}}return c};return{onRequest:async t=>{if(t.path==="/auth")return Response.redirect(`https://slack-api-flow-dev.vercel.app/api/auth?api_endpoint=${e.serverOrigin}/api/plugin/${e.pluginSlug}/auth/callback`);if(t.path==="/auth/callback"){const a=await e.store.getPluginItem(p),{ok:c,...i}=t.body;if(!c)return console.log("❌ Slack auth callback failed - req.body.ok is false"),new Response("req.body.ok is false",{status:500});const o=await fetch(`https://slack.com/api/team.info?team=${i.team.id}`,{headers:{Authorization:`Bearer ${i.access_token??i.authed_user.access_token}`}}).then(async d=>await d.json()).catch(()=>null);if(!o)return console.log("❌ Slack auth callback failed - teamInfo.ok is false"),new Response("Couldn't get user's workspace info.",{status:500});const h={...i,created_at:new Date().toISOString(),team:{...i.team,...o.team}};return await e.store.setSecretItem(p,{...(a==null?void 0:a.value)??{},[h.team.id]:h}),await e.pgBoss.send(I,{}),new Response}return new Response},operations:{workspaces:async()=>{const t=await S().catch(()=>null);return t?{data:{workspaces:Object.entries(t).map(([a,c])=>({connectedAt:c.created_at,teamId:a,teamName:c.team.name,teamIcon:c.team.icon.image_44}))}}:{data:{workspaces:[]}}},getChannels:async t=>{const a=await e.store.getPluginItem(A).then(i=>i==null?void 0:i.value).catch(()=>null),c=!!a&&e.dayjs(a.updatedAt).isAfter(e.dayjs().subtract(1,"minute"));if(t.forceRefresh&&!c){console.log("[slack] refreshing channels");const i=await E(),o=e.dayjs().toISOString();return await e.store.setSecretItem(A,{updatedAt:o,channels:i}),{data:{channels:i,lastCachedAt:o}}}return console.log(`[slack] using cached channels (cached recently: ${c})`),{data:{channels:(a==null?void 0:a.channels)??[],lastCachedAt:(a==null?void 0:a.updatedAt)??e.dayjs().toISOString()}}},postMessage:async t=>{if(!t.channels.length)throw new e.GraphQLError("No channels provided.",{extensions:{code:"NO_CHANNELS_PROVIDED",userFriendlyMessage:"No channels selected. Please select at least one channel."}});const a=await S().catch(()=>null);if(!a)throw new e.GraphQLError("User not authenticated.",{extensions:{code:"NOT_AUTHENTICATED",userFriendlyMessage:"You are not authenticated and will need to connect your Slack account(s) first."}});const c=N(t.message);if(c.length){const n=e.dayjs(c[0].ts).toISOString();return e.pgBoss.send(k,{date:n},{startAfter:e.dayjs().add(10,"seconds").toISOString()}),{data:{ok:!0,messages:[]}}}const i=await _(t.message),o=e.html.parse(t.message);o.querySelectorAll("slack-status").forEach(n=>{var l;if(!n.attributes["data-task-id"])return;const u=(l=e.decodeGlobalId(n.attributes["data-task-id"]))==null?void 0:l.id;if(!u)return;const s=parseInt(u);if(!s)return;const r=i.get(s);r&&n.replaceWith(y[r.status])}),o.querySelectorAll("slack-message").forEach(n=>{n.replaceWith("")}),o.querySelectorAll("li").forEach(n=>{n.querySelectorAll("p").forEach(u=>{u.replaceWith(u.innerHTML)})}),o.querySelectorAll("slack-future-tasks").forEach(n=>{n.parentNode.tagName==="P"&&(n=n.parentNode),n.parentNode.tagName==="LI"&&(n=n.parentNode),n.replaceWith("")});const h=e.html.toSlack(o.toString()),d=[];for(const n of t.channels){const u=a[n.teamId].authed_user.access_token,s=await fetch(`https://slack.com/api/chat.postMessage?channel=${n.channelId}&blocks=${JSON.stringify(h)}`,{headers:{Authorization:`Bearer ${u}`}}).then(async r=>await r.json());if(!s.ok){const r=await fetch(`https://slack.com/api/conversations.info?channel=${n.channelId}`,{headers:{Authorization:`Bearer ${u}`}}).then(async l=>await l.json()).catch(()=>null);throw new e.GraphQLError("Couldn't post message.",{extensions:{code:"COULDNT_POST_MESSAGE",userFriendlyMessage:`Couldn't post message to channel ${r!=null&&r.channel.name?`#${r==null?void 0:r.channel.name}`:"Unknonwn"}. The message may be too complex.`}})}d.push({teamId:n.teamId,channelId:n.channelId,ts:s.ts})}return{data:{ok:!0,messages:d}}}},onUpdateTaskStatusEnd:async t=>{const a=e.dayjs(t.task.date);await e.pgBoss.send(k,{date:a.toISOString()})},onCreateTask:async t=>{const a=e.dayjs(t.task.date);await e.pgBoss.send(k,{date:a.toISOString()})},onUpdateTaskEnd:async t=>{const a=e.dayjs(t.task.date);await e.pgBoss.send(k,{date:a.toISOString()})},onAddRoutineStepEnd:async t=>{if(t.step.stepSlug===$){const a=await e.getInstalledPlugins();await e.prisma.template.upsert({where:{slug:`${e.pluginSlug}-${t.step.stepSlug}`},create:{slug:`${e.pluginSlug}-${t.step.stepSlug}`,template:M({withLinear:a.some(c=>c.slug==="linear")}),routineStepId:t.step.id},update:{routineStepId:t.step.id}})}},handlebars:{helpers:{status:function(){return!("status"in this)||!("id"in this)?"":new e.Handlebars.SafeString(`<slack-status data-task-id="Task_${this.id}">${y[this.status]}</slack-status>`)},"future-tasks":async function(t){if(!t||!("fn"in t))return"";const a=t.hash.filter??{},c=e.html.escape(JSON.stringify(a)),i=await t.fn({});return new e.Handlebars.SafeString(`<slack-future-tasks filter="${c}">${i}</slack-future-tasks>`)}}},handlePgBossWork:t=>[t(k,async a=>{const c=a.data,i=await S().catch(()=>null);if(!i)return;const o=await e.prisma.note.findFirst({where:{date:c.date}});if(!o)return;const h=await _(o.content),d=N(o.content);if(!d.length)return;const n=e.html.parse(o.content);for(let s of n.querySelectorAll("slack-future-tasks")){const r=s.innerHTML;let l={};try{const g=e.html.unescape(s.getAttribute("filter")??"{}"),w=await e.renderTemplate(g,{});l=JSON.parse(w)}catch{}const m=await e.prisma.task.findMany({...l,where:{date:c.date,id:{notIn:Array.from(h.keys())},...(l==null?void 0:l.where)??{}},include:{tags:!0,pluginDatas:!0,item:{select:{id:!0}},...(l==null?void 0:l.include)??{}}}).then(g=>g.map(w=>{const b=e.html.parse(w.title);return b.querySelectorAll("p").forEach(T=>{T.replaceWith(T.innerHTML)}),{...w,title:new e.Handlebars.SafeString(b.toString())}}));let f="";for(const g of m)f+=await e.renderTemplate(r,g);s.parentNode.tagName==="P"&&(s=s.parentNode),s.parentNode.tagName==="LI"&&(s=s.parentNode),s.replaceWith(f)}n.querySelectorAll("slack-status").forEach(s=>{var f;if(!s.attributes["data-task-id"])return;const r=(f=e.decodeGlobalId(s.attributes["data-task-id"]))==null?void 0:f.id;if(!r)return;const l=parseInt(r);if(!l)return;const m=h.get(l);m?s.replaceWith(y[m.status]):s.replaceWith(s.innerHTML)}),n.querySelectorAll("slack-message").forEach(s=>{s.replaceWith("")}),n.querySelectorAll("li").forEach(s=>{s.querySelectorAll("p").forEach(r=>{r.replaceWith(r.innerHTML)})});const u=e.html.toSlack(n.toString());for(const s of d){const r=i[s.teamId].authed_user.access_token,l=await fetch(`https://slack.com/api/chat.update?channel=${s.channelId}&ts=${s.ts}&blocks=${JSON.stringify(u)}`,{headers:{Authorization:`Bearer ${r}`}}).then(async m=>await m.json());if(!l.ok){console.log("❌ Slack message update failed - res.ok is false",l.error);continue}console.log("✅ Slack message update successful")}}),t(I,async a=>{const c=await E();await e.store.setSecretItem(A,{updatedAt:e.dayjs().toISOString(),channels:c})})]}});module.exports=L;
