"use strict";const y=e=>({plugin:e}),I="post-to-slack",_=e=>`Plan for today
<ul>{{#tasks}}
  <li>{{slack-status}} {{title}} ${e!=null&&e.withLinear?'{{#linear-issue-exists}}- <a href="{{linear-issue-link}}">{{linear-issue-id}}</a>{{/linear-issue-exists}}':""}</li>
{{else}}
  <li>No tasks</li> 
{{/tasks}}</ul>`,p="account-tokens",A=y(e=>{const f="update-task-status",k=async()=>{const a=await e.store.getPluginItem(p);if(!a)throw new e.GraphQLError("User not authenticated.",{extensions:{code:"NOT_AUTHENTICATED",userFriendlyMessage:"You are not authenticated and will need to connect your Slack account(s) first."}});return a.value},g={TODO:"",DONE:"✅",CANCELED:"❌"},w=async a=>{const r=e.parseHtml(a).querySelectorAll("slack-status").map(s=>{var o;if(!s.attributes["data-task-id"])return null;const c=(o=e.decodeGlobalId(s.attributes["data-task-id"]))==null?void 0:o.id;return c?parseInt(c):null}).filter(s=>s!==null);return await e.prisma.task.findMany({where:{id:{in:r}}}).then(s=>new Map(s.map(c=>[c.id,c])))};return{onRequest:async a=>{if(a.path==="/auth")return Response.redirect(`https://slack-api-flow-dev.vercel.app/api/auth?api_endpoint=${e.serverOrigin}/api/plugin/${e.pluginSlug}/auth/callback`);if(a.path==="/auth/callback"){const r=await e.store.getPluginItem(p),{ok:i,...s}=a.body;if(!i)return console.log("❌ Slack auth callback failed - req.body.ok is false"),new Response("req.body.ok is false",{status:500});const c=await fetch(`https://slack.com/api/team.info?team=${s.team.id}`,{headers:{Authorization:`Bearer ${s.access_token??s.authed_user.access_token}`}}).then(async n=>await n.json()).catch(()=>null);if(!c)return console.log("❌ Slack auth callback failed - teamInfo.ok is false"),new Response("Couldn't get user's workspace info.",{status:500});const o={...s,created_at:new Date().toISOString(),team:{...s.team,...c.team}};return await e.store.setSecretItem(p,{...(r==null?void 0:r.value)??{},[o.team.id]:o}),new Response}return new Response},operations:{workspaces:async()=>{const a=await k().catch(()=>null);return a?{data:{workspaces:Object.entries(a).map(([r,i])=>({connectedAt:i.created_at,teamId:r,teamName:i.team.name,teamIcon:i.team.icon.image_44}))}}:{data:{workspaces:[]}}},getChannels:async a=>{const r=await k().catch(()=>null),i=[];for(const s in r){const c=r[s],o=await fetch("https://slack.com/api/conversations.list",{headers:{Authorization:`Bearer ${c.authed_user.access_token}`}}).then(async n=>await n.json()).catch(()=>null);o!=null&&o.ok&&i.push(...o.channels.map(n=>({id:n.id,name:n.name,team:{id:c.team.id,name:c.team.name,icon:c.team.icon.image_44}})))}return{data:{channels:i}}},postMessage:async a=>{if(!a.channels.length)throw new e.GraphQLError("No channels provided.",{extensions:{code:"NO_CHANNELS_PROVIDED",userFriendlyMessage:"No channels selected. Please select at least one channel."}});const r=await k().catch(()=>null);if(!r)throw new e.GraphQLError("User not authenticated.",{extensions:{code:"NOT_AUTHENTICATED",userFriendlyMessage:"You are not authenticated and will need to connect your Slack account(s) first."}});const i=await w(a.message),s=e.parseHtml(a.message);s.querySelectorAll("slack-status").forEach(n=>{var u;if(!n.attributes["data-task-id"])return;const l=(u=e.decodeGlobalId(n.attributes["data-task-id"]))==null?void 0:u.id;if(!l)return;const d=parseInt(l);if(!d)return;const t=i.get(d);t&&n.replaceWith(g[t.status])}),s.querySelectorAll("slack-message").forEach(n=>{n.replaceWith("")}),s.querySelectorAll("li").forEach(n=>{n.querySelectorAll("p").forEach(l=>{l.replaceWith(l.innerHTML)})});const c=e.htmlToSlack(s.toString()),o=[];for(const n of a.channels){const l=r[n.teamId].authed_user.access_token,d=await fetch(`https://slack.com/api/chat.postMessage?channel=${n.channelId}&blocks=${JSON.stringify(c)}`,{headers:{Authorization:`Bearer ${l}`}}).then(async t=>await t.json());if(!d.ok){const t=await fetch(`https://slack.com/api/conversations.info?channel=${n.channelId}`,{headers:{Authorization:`Bearer ${l}`}}).then(async u=>await u.json()).catch(()=>null);throw new e.GraphQLError("Couldn't post message.",{extensions:{code:"COULDNT_POST_MESSAGE",userFriendlyMessage:`Couldn't post message to channel ${t!=null&&t.channel.name?`#${t==null?void 0:t.channel.name}`:"Unknonwn"}. The message may be too complex.`}})}o.push({teamId:n.teamId,channelId:n.channelId,ts:d.ts})}return{data:{ok:!0,messages:o}}}},onUpdateTaskStatusEnd:async a=>{const r=e.dayjs();await e.pgBoss.send(f,{date:r.toISOString()})},onAddRoutineStepEnd:async a=>{if(a.step.stepSlug===I){const r=await e.getInstalledPlugins();await e.prisma.template.upsert({where:{slug:`${e.pluginSlug}-${a.step.stepSlug}`},create:{slug:`${e.pluginSlug}-${a.step.stepSlug}`,template:_({withLinear:r.some(i=>i.slug==="linear")}),routineStepId:a.step.id},update:{routineStepId:a.step.id}})}},handlebars:{helpers:{status:function(){return!("status"in this)||!("id"in this)?"":new e.Handlebars.SafeString(`<slack-status data-task-id="Task_${this.id}">${g[this.status]}</slack-status>`)}}},handlePgBossWork:a=>[a(f,async r=>{const i=r.data,s=await e.prisma.note.findFirst({where:{date:i.date}});if(!s)return;const c=e.parseHtml(s.content).querySelectorAll("slack-message").map(t=>({teamId:t.attributes["data-team-id"],channelId:t.attributes["data-channel-id"],ts:t.attributes["data-ts"]}));if(!c.length)return;const o=await k().catch(()=>null);if(!o)return;const n=await w(s.content),l=e.parseHtml(s.content);l.querySelectorAll("slack-status").forEach(t=>{var S;if(!t.attributes["data-task-id"])return;const u=(S=e.decodeGlobalId(t.attributes["data-task-id"]))==null?void 0:S.id;if(!u)return;const h=parseInt(u);if(!h)return;const m=n.get(h);m&&t.replaceWith(g[m.status])}),l.querySelectorAll("slack-message").forEach(t=>{t.replaceWith("")}),l.querySelectorAll("li").forEach(t=>{t.querySelectorAll("p").forEach(u=>{u.replaceWith(u.innerHTML)})});const d=e.htmlToSlack(l.toString());for(const t of c){const u=o[t.teamId].authed_user.access_token,h=await fetch(`https://slack.com/api/chat.update?channel=${t.channelId}&ts=${t.ts}&blocks=${JSON.stringify(d)}`,{headers:{Authorization:`Bearer ${u}`}}).then(async m=>await m.json());if(!h.ok){console.log("❌ Slack message update failed - res.ok is false",h.error);continue}console.log("✅ Slack message update successful")}})]}});module.exports=A;
