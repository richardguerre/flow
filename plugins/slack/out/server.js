"use strict";const I=e=>({plugin:e}),_="post-your-plan",y=`Plan for today
{{#tasks}}
  <ul>
    <li>
      <p>{{slack-status}} {{title}}</p>
    </li>
  </ul>
{{else}}
  <p>No tasks today</p>
{{/tasks}}
`,f="account-tokens",E="templates",A=I(e=>{const g="update-task-status",m=async()=>{const t=await e.store.getPluginItem(f);if(!t)throw new e.GraphQLError("User not authenticated.",{extensions:{code:"NOT_AUTHENTICATED",userFriendlyMessage:"You are not authenticated and will need to connect your Slack account(s) first."}});return t.value},p={TODO:"",DONE:"✅",CANCELED:"❌"},S=async t=>{const o=e.parseHtml(t).querySelectorAll("slack-status").map(s=>{var c;if(!s.attributes["data-task-id"])return null;const r=(c=e.decodeGlobalId(s.attributes["data-task-id"]))==null?void 0:c.id;return r?parseInt(r):null}).filter(s=>s!==null);return await e.prisma.task.findMany({where:{id:{in:o}}}).then(s=>new Map(s.map(r=>[r.id,r])))};return{onRequest:async t=>{if(t.path==="/auth")return Response.redirect(`https://slack-api-flow-dev.vercel.app/api/auth?api_endpoint=${e.serverOrigin}/api/plugin/${e.pluginSlug}/auth/callback`);if(t.path==="/auth/callback"){const o=await e.store.getPluginItem(f),{ok:l,...s}=t.body;if(!l)return console.log("❌ Slack auth callback failed - req.body.ok is false"),new Response("req.body.ok is false",{status:500});const r=await fetch(`https://slack.com/api/team.info?team=${s.team.id}`,{headers:{Authorization:`Bearer ${s.access_token??s.authed_user.access_token}`}}).then(async n=>await n.json()).catch(()=>null);if(!r)return console.log("❌ Slack auth callback failed - teamInfo.ok is false"),new Response("Couldn't get user's workspace info.",{status:500});const c={...s,created_at:new Date().toISOString(),team:{...s.team,...r.team}};return await e.store.setSecretItem(f,{...(o==null?void 0:o.value)??{},[c.team.id]:c}),new Response}return new Response},operations:{workspaces:async()=>{const t=await m().catch(()=>null);return t?{data:{workspaces:Object.entries(t).map(([o,l])=>({connectedAt:l.created_at,teamId:o,teamName:l.team.name,teamIcon:l.team.icon.image_44}))}}:{data:{workspaces:[]}}},getChannels:async t=>{const o=await m().catch(()=>null),l=[];for(const s in o){const r=o[s],c=await fetch("https://slack.com/api/conversations.list",{headers:{Authorization:`Bearer ${r.authed_user.access_token}`}}).then(async n=>await n.json()).catch(()=>null);c!=null&&c.ok&&l.push(...c.channels.map(n=>({id:n.id,name:n.name,team:{id:r.team.id,name:r.team.name,icon:r.team.icon.image_44}})))}return{data:{channels:l}}},postMessage:async t=>{if(!t.channels.length)throw new e.GraphQLError("No channels provided.",{extensions:{code:"NO_CHANNELS_PROVIDED",userFriendlyMessage:"No channels selected. Please select at least one channel."}});const o=await m().catch(()=>null);if(!o)throw new e.GraphQLError("User not authenticated.",{extensions:{code:"NOT_AUTHENTICATED",userFriendlyMessage:"You are not authenticated and will need to connect your Slack account(s) first."}});const l=await S(t.message),s=e.parseHtml(t.message);s.querySelectorAll("slack-status").forEach(n=>{var u;if(!n.attributes["data-task-id"])return;const i=(u=e.decodeGlobalId(n.attributes["data-task-id"]))==null?void 0:u.id;if(!i)return;const d=parseInt(i);if(!d)return;const a=l.get(d);a&&n.replaceWith(p[a.status])}),s.querySelectorAll("slack-message").forEach(n=>{n.replaceWith("")}),s.querySelectorAll("li").forEach(n=>{n.querySelectorAll("p").forEach(i=>{i.replaceWith(i.innerHTML)})});const r=e.htmlToSlack(s.toString()),c=[];for(const n of t.channels){const i=o[n.teamId].authed_user.access_token,d=await fetch(`https://slack.com/api/chat.postMessage?channel=${n.channelId}&blocks=${JSON.stringify(r)}`,{headers:{Authorization:`Bearer ${i}`}}).then(async a=>await a.json());if(!d.ok){const a=await fetch(`https://slack.com/api/conversations.info?channel=${n.channelId}`,{headers:{Authorization:`Bearer ${i}`}}).then(async u=>await u.json()).catch(()=>null);throw new e.GraphQLError("Couldn't post message.",{extensions:{code:"COULDNT_POST_MESSAGE",userFriendlyMessage:`Couldn't post message to channel ${a!=null&&a.channel.name?`#${a==null?void 0:a.channel.name}`:"Unknonwn"}. The message may be too complex.`}})}c.push({teamId:n.teamId,channelId:n.channelId,ts:d.ts})}return{data:{ok:!0,messages:c}}},getRoutineStepInfo:async t=>{var r;const l=((r=(await e.store.getPluginItem(E).then(c=>(c==null?void 0:c.value)??{}))[t.routineStepId])==null?void 0:r.template)??y;return{data:{renderedTemplate:await e.renderTemplate(l,{jfdksl:null})}}}},onUpdateTaskStatusEnd:async t=>{const o=e.dayjs();await e.pgBoss.send(g,{date:o.toISOString()})},onAddRoutineStepEnd:async t=>{t.step.stepSlug===_&&await e.prisma.template.upsert({where:{slug:`${e.pluginSlug}-${t.step.stepSlug}`},create:{slug:`${e.pluginSlug}-${t.step.stepSlug}`,template:y,routineStepId:t.step.id},update:{routineStepId:t.step.id}})},handlebars:{helpers:{status:function(){return!("status"in this)||!("id"in this)?"":new e.Handlebars.SafeString(`<slack-status data-task-id="Task_${this.id}">${p[this.status]}</slack-status>`)}}},handlePgBossWork:t=>[t(g,async o=>{const l=o.data,s=await e.prisma.note.findFirst({where:{date:l.date}});if(!s)return;const r=e.parseHtml(s.content).querySelectorAll("slack-message").map(a=>({teamId:a.attributes["data-team-id"],channelId:a.attributes["data-channel-id"],ts:a.attributes["data-ts"]}));if(!r.length)return;const c=await m().catch(()=>null);if(!c)return;const n=await S(s.content),i=e.parseHtml(s.content);i.querySelectorAll("slack-status").forEach(a=>{var w;if(!a.attributes["data-task-id"])return;const u=(w=e.decodeGlobalId(a.attributes["data-task-id"]))==null?void 0:w.id;if(!u)return;const h=parseInt(u);if(!h)return;const k=n.get(h);k&&a.replaceWith(p[k.status])}),i.querySelectorAll("slack-message").forEach(a=>{a.replaceWith("")}),i.querySelectorAll("li").forEach(a=>{a.querySelectorAll("p").forEach(u=>{u.replaceWith(u.innerHTML)})});const d=e.htmlToSlack(i.toString());for(const a of r){const u=c[a.teamId].authed_user.access_token,h=await fetch(`https://slack.com/api/chat.update?channel=${a.channelId}&ts=${a.ts}&blocks=${JSON.stringify(d)}`,{headers:{Authorization:`Bearer ${u}`}}).then(async k=>await k.json());if(!h.ok){console.log("❌ Slack message update failed - res.ok is false",h.error);continue}console.log("✅ Slack message update successful")}})]}});module.exports=A;
